//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.HashCode
{
	using System.Threading.Tasks;
	public partial class ChangingHashcodeTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(WikiPage), pageId)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(WikiImage), imageId)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfImageAsync()
		{
			Assert.IsNull(await (AuditReader().FindAsync<WikiImage>(imageId, 1)).ConfigureAwait(false));
			Assert.AreEqual(new WikiImage{Name="name1"}, await (AuditReader().FindAsync<WikiImage>(imageId, 2)).ConfigureAwait(false));
			Assert.AreEqual(new WikiImage{Name="name2"}, await (AuditReader().FindAsync<WikiImage>(imageId, 3)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfPageAsync()
		{
			CollectionAssert.IsEmpty((await (AuditReader().FindAsync<WikiPage>(pageId, 1)).ConfigureAwait(false)).Images);
			CollectionAssert.AreEquivalent((await (AuditReader().FindAsync<WikiPage>(pageId, 2)).ConfigureAwait(false)).Images, new[]{new WikiImage{Name="name1"}});
			CollectionAssert.AreEquivalent((await (AuditReader().FindAsync<WikiPage>(pageId, 3)).ConfigureAwait(false)).Images, new[]{new WikiImage{Name="name2"}});
		}
	}
}