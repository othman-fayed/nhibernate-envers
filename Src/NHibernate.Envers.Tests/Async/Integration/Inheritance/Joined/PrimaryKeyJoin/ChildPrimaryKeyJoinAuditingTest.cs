//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NHibernate.Envers.Configuration.Attributes;
using NHibernate.Envers.Tests.Integration.Inheritance.Entities;
using NHibernate.Mapping;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Inheritance.Joined.PrimaryKeyJoin
{
	using System.Threading.Tasks;
	public partial class ChildPrimaryKeyJoinAuditingTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] {1, 2}, await (AuditReader().GetRevisionsAsync(typeof(ChildPrimaryKeyJoinEntity),id1)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfChildAsync()
		{
			var ver1 = new ChildPrimaryKeyJoinEntity {Id = id1, Data = "x", Number = 1};
			var ver2 = new ChildPrimaryKeyJoinEntity {Id = id1, Data = "y", Number = 2};

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<ChildPrimaryKeyJoinEntity>(id1, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<ParentEntity>(id1, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ChildPrimaryKeyJoinEntity>(id1, 2)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ParentEntity>(id1, 2)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyPolymorphicQueryAsync()
		{
			var ver1 = new ChildPrimaryKeyJoinEntity {Id = id1, Data = "x", Number = 1};
			Assert.AreEqual(ver1,
			                await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof (ChildPrimaryKeyJoinEntity), 1).
			                	GetSingleResultAsync()).ConfigureAwait(false));
			Assert.AreEqual(ver1, await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof (ParentEntity), 1).GetSingleResultAsync()).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyPolymorphicQueryGenericAsync()
		{
			var ver1 = new ChildPrimaryKeyJoinEntity { Id = id1, Data = "x", Number = 1 };
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision<ChildPrimaryKeyJoinEntity>(1).SingleAsync()).ConfigureAwait(false)).Should().Be(ver1);
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision<ParentEntity>(1).SingleAsync()).ConfigureAwait(false)).Should().Be(ver1);
		}
	}
} 