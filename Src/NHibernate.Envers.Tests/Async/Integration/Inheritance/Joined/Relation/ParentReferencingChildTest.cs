//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Envers.Tests.Integration.Inheritance.Entities;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Inheritance.Joined.Relation
{
	using System.Threading.Tasks;
	public partial class ParentReferencingChildTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof(Person),expLukaszRev1.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(1, 2, 3);
			(await (AuditReader().GetRevisionsAsync(typeof(RightsSubject),expLukaszRev1.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(1, 2, 3);

			(await (AuditReader().GetRevisionsAsync(typeof(Person),expAdamRev4.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(4, 5, 6);
			(await (AuditReader().GetRevisionsAsync(typeof(RightsSubject),expAdamRev4.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(4, 5, 6);

			(await (AuditReader().GetRevisionsAsync(typeof(Role),expAdminRev1.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(1, 2, 5);
			(await (AuditReader().GetRevisionsAsync(typeof(RightsSubject),expAdminRev1.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(1, 2, 5);

			(await (AuditReader().GetRevisionsAsync(typeof(Role),expDirectorRev3.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(3, 4);
			(await (AuditReader().GetRevisionsAsync(typeof(RightsSubject),expDirectorRev3.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(3, 4);
		}

		[Test]
		public async Task VerifyHistoryOfAdamAsync()
		{
			var adamRev4 = await (AuditReader().FindAsync<Person>(expAdamRev4.Id, 4)).ConfigureAwait(false);
			var rightsSubject5 = await (AuditReader().FindAsync<RightsSubject>(expAdamRev4.Id, 5)).ConfigureAwait(false);

			adamRev4.Should().Be.EqualTo(expAdamRev4);
			adamRev4.Roles.Should().Have.SameValuesAs(expDirectorRev3);
			rightsSubject5.Roles.Should().Have.SameValuesAs(expDirectorRev3, expAdminRev2);
		}

		[Test]
		public async Task VerifyHistoryOfLukaszAsync()
		{
			var lukaszRev1 = await (AuditReader().FindAsync<Person>(expLukaszRev1.Id, 1)).ConfigureAwait(false);
			var lukaszRev2 = await (AuditReader().FindAsync<Person>(expLukaszRev1.Id, 2)).ConfigureAwait(false);
			var rightsSubject3 = await (AuditReader().FindAsync<RightsSubject>(expLukaszRev1.Id, 3)).ConfigureAwait(false);
			var lukaszRev3 = await (AuditReader().FindAsync<Person>(expLukaszRev1.Id, 3)).ConfigureAwait(false);

			lukaszRev1.Should().Be.EqualTo(expLukaszRev1);
			lukaszRev2.Should().Be.EqualTo(expLukaszRev2);
			lukaszRev1.Roles.Should().Have.SameValuesAs(expAdminRev1);
			rightsSubject3.Roles.Should().Have.SameValuesAs(expAdminRev2, expDirectorRev3);
			lukaszRev3.Roles.Should().Have.SameValuesAs(expAdminRev2, expDirectorRev3);
		}

		[Test]
		public async Task VerifyHistoryOfAdminAsync()
		{
			var adminRev1 = await (AuditReader().FindAsync<Role>(expAdminRev1.Id, 1)).ConfigureAwait(false);
			var adminRev2 = await (AuditReader().FindAsync<Role>(expAdminRev1.Id, 2)).ConfigureAwait(false);
			var adminRev5 = await (AuditReader().FindAsync<Role>(expAdminRev1.Id, 5)).ConfigureAwait(false);

			adminRev1.Should().Be.EqualTo(expAdminRev1);
			adminRev2.Should().Be.EqualTo(expAdminRev2);
			adminRev1.Members.Should().Have.SameValuesAs(expLukaszRev1);
			adminRev5.Members.Should().Have.SameValuesAs(expLukaszRev2, expAdamRev4);
		}
	}
}