//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Envers.Tests.Integration.Inheritance.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Inheritance.Single.ChildRelation
{
	using System.Threading.Tasks;
	public partial class ChildReferencingTest : TestBase
	{


		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(ReferencedToChildEntity), re_id1)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 3 }, await (AuditReader().GetRevisionsAsync(typeof(ReferencedToChildEntity), re_id2)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(ChildIngEntity), c_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfReferencedCollection1Async()
		{
			CollectionAssert.IsEmpty((await (AuditReader().FindAsync<ReferencedToChildEntity>(re_id1, 1)).ConfigureAwait(false)).Referencing);
			CollectionAssert.AreEquivalent(new[] { new ChildIngEntity { Id = c_id, Data = "y", Number = 1 } }, (await (AuditReader().FindAsync<ReferencedToChildEntity>(re_id1, 2)).ConfigureAwait(false)).Referencing);
			CollectionAssert.IsEmpty((await (AuditReader().FindAsync<ReferencedToChildEntity>(re_id1, 3)).ConfigureAwait(false)).Referencing);
		}

		[Test]
		public async Task VerifyHistoryOfReferencedCollection2Async()
		{
			CollectionAssert.IsEmpty((await (AuditReader().FindAsync<ReferencedToChildEntity>(re_id2, 1)).ConfigureAwait(false)).Referencing);
			CollectionAssert.IsEmpty((await (AuditReader().FindAsync<ReferencedToChildEntity>(re_id2, 2)).ConfigureAwait(false)).Referencing);
			CollectionAssert.AreEquivalent(new[] { new ChildIngEntity { Id = c_id, Data = "y", Number = 1 } }, (await (AuditReader().FindAsync<ReferencedToChildEntity>(re_id2, 3)).ConfigureAwait(false)).Referencing);
		}

		[Test]
		public async Task VerifyChildHistoryAsync()
		{
			Assert.IsNull(await (AuditReader().FindAsync<ChildIngEntity>(c_id, 1)).ConfigureAwait(false));
			Assert.AreEqual(new ReferencedToChildEntity { Id = re_id1 }, (await (AuditReader().FindAsync<ChildIngEntity>(c_id, 2)).ConfigureAwait(false)).Referenced);
			Assert.AreEqual(new ReferencedToChildEntity { Id = re_id2 }, (await (AuditReader().FindAsync<ChildIngEntity>(c_id, 3)).ConfigureAwait(false)).Referenced);
		}
	}
}