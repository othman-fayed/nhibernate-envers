//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Envers.Tests.Integration.Inheritance.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Inheritance.Single.Relation
{
	using System.Threading.Tasks;
	public partial class PolymorphicCollectionTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(ReferencedToParentEntity), ed_id1)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 2 }, await (AuditReader().GetRevisionsAsync(typeof(ParentIngEntity), p_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 3 }, await (AuditReader().GetRevisionsAsync(typeof(ChildNotIngEntity), c_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfReferencedCollectionAsync()
		{
			CollectionAssert.IsEmpty((await (AuditReader().FindAsync<ReferencedToParentEntity>(ed_id1, 1)).ConfigureAwait(false)).Referencing);
			CollectionAssert.AreEquivalent(new[] { new ParentIngEntity { Id = p_id, Data = "x" } },
										(await (AuditReader().FindAsync<ReferencedToParentEntity>(ed_id1, 2)).ConfigureAwait(false)).Referencing);
			CollectionAssert.AreEquivalent(new[] { new ParentIngEntity { Id = p_id, Data = "x" }, new ChildNotIngEntity{ Id = c_id, Data = "y", Number = 1} },
										(await (AuditReader().FindAsync<ReferencedToParentEntity>(ed_id1, 3)).ConfigureAwait(false)).Referencing);
		}
	}
}