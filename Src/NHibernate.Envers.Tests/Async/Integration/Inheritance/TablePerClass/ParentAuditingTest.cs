//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Dialect;
using NHibernate.Envers.Strategy;
using NHibernate.Envers.Tests.Integration.Inheritance.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Inheritance.TablePerClass
{
	using System.Threading.Tasks;
	public partial class ParentAuditingTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(ParentEntity), id1)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfChildAsync()
		{
			Assert.IsNull(await (AuditReader().FindAsync<ChildEntity>(id1, 1)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<ChildEntity>(id1, 2)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfParentAsync()
		{
			var ver1 = new ParentEntity { Id = id1, Data = "x" };
			var ver2 = new ParentEntity { Id = id1, Data = "y" };

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<ParentEntity>(id1, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ParentEntity>(id1, 2)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyPolymorphicQueryAsync()
		{
			var childVersion1 = new ParentEntity { Id = id1, Data = "x" };
			Assert.AreEqual(childVersion1, await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof(ParentEntity), 1).GetSingleResultAsync()).ConfigureAwait(false));
			CollectionAssert.IsEmpty(await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof(ChildEntity), 1).GetResultListAsync()).ConfigureAwait(false));
		}
	}
}