//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Inheritance.Mixed
{
	using System.Threading.Tasks;
	public partial class MixedInheritanceStrategiesEntityTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionsCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (NormalActivity), id1)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1);
			(await (AuditReader().GetRevisionsAsync(typeof(NormalActivity), id3)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(3);
			(await (AuditReader().GetRevisionsAsync(typeof(CheckInActivity), id2)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(2, 4);
		}

		[Test]
		public async Task VerifyCurrentStateOfCheckInActivityAsync()
		{
			var checkinActivity = await (Session.GetAsync<CheckInActivity>(id2)).ConfigureAwait(false);
			var normalActivity = await (Session.GetAsync<NormalActivity>(id3)).ConfigureAwait(false);

			checkinActivity.Id.Should().Be.EqualTo(id2);
			checkinActivity.SequenceNumber.Should().Be.EqualTo(0);
			checkinActivity.DurationInMinutes.Should().Be.EqualTo(30);
			checkinActivity.RelatedActivity.Id.Should().Be.EqualTo(normalActivity.Id);
			checkinActivity.RelatedActivity.SequenceNumber.Should().Be.EqualTo(normalActivity.SequenceNumber);
		}

		[Test]
		public async Task VerifyCurrentStateOfNormalActivitiesAsync()
		{
			var normalActivity1 = await (Session.GetAsync<NormalActivity>(id1)).ConfigureAwait(false);
			var normalActivity2 = await (Session.GetAsync<NormalActivity>(id3)).ConfigureAwait(false);

			normalActivity1.Id.Should().Be.EqualTo(id1);
			normalActivity1.SequenceNumber.Should().Be.EqualTo(1);
			normalActivity2.Id.Should().Be.EqualTo(id3);
			normalActivity2.SequenceNumber.Should().Be.EqualTo(2);
		}

		[Test]
		public async Task VerifyFirstRevisionOfCheckInActivityAsync()
		{
			var checkInActivity = await (AuditReader().FindAsync<CheckInActivity>(id2, 2)).ConfigureAwait(false);
			var normalActivity = await (AuditReader().FindAsync<NormalActivity>(id1, 2)).ConfigureAwait(false);

			checkInActivity.Id.Should().Be.EqualTo(id2);
			checkInActivity.SequenceNumber.Should().Be.EqualTo(0);
			checkInActivity.DurationInMinutes.Should().Be.EqualTo(30);
			checkInActivity.RelatedActivity.Id.Should().Be.EqualTo(normalActivity.Id);
			checkInActivity.RelatedActivity.SequenceNumber.Should().Be.EqualTo(normalActivity.SequenceNumber);
		}

		[Test]
		public async Task VerifySecondRevisionOfCheckInActivityAsync()
		{
			var checkInActivity = await (AuditReader().FindAsync<CheckInActivity>(id2, 4)).ConfigureAwait(false);
			var normalActivity = await (AuditReader().FindAsync<NormalActivity>(id3, 4)).ConfigureAwait(false);

			checkInActivity.Id.Should().Be.EqualTo(id2);
			checkInActivity.SequenceNumber.Should().Be.EqualTo(0);
			checkInActivity.DurationInMinutes.Should().Be.EqualTo(30);
			checkInActivity.RelatedActivity.Id.Should().Be.EqualTo(normalActivity.Id);
			checkInActivity.RelatedActivity.SequenceNumber.Should().Be.EqualTo(normalActivity.SequenceNumber);
		}
	}
}