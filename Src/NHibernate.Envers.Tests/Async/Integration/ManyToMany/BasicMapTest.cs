//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NHibernate.Envers.Tests.Entities.ManyToMany;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.ManyToMany
{
	using System.Threading.Tasks;
	public partial class BasicMapTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(MapOwnedEntity), ed1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(MapOwnedEntity), ed2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(MapOwningEntity), ing1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(MapOwningEntity), ing2_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfEd1Async()
		{
			var ing1 = await (Session.GetAsync<MapOwningEntity>(ing1_id)).ConfigureAwait(false);
			var ing2 = await (Session.GetAsync<MapOwningEntity>(ing2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<MapOwnedEntity>(ed1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<MapOwnedEntity>(ed1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<MapOwnedEntity>(ed1_id, 3)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Referencing);
			CollectionAssert.AreEquivalent(new[] { ing1, ing2 }, rev2.Referencing);
			CollectionAssert.AreEquivalent(new[] { ing2 }, rev3.Referencing);
		}

		[Test]
		public async Task VerifyHistoryOfEd2Async()
		{
			var ing2 = await (Session.GetAsync<MapOwningEntity>(ing2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<MapOwnedEntity>(ed2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<MapOwnedEntity>(ed2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<MapOwnedEntity>(ed2_id, 3)).ConfigureAwait(false);

			CollectionAssert.AreEquivalent(new[] { ing2 }, rev1.Referencing);
			CollectionAssert.IsEmpty(rev2.Referencing);
			CollectionAssert.AreEquivalent(new[] { ing2 }, rev3.Referencing);
		}

		[Test]
		public async Task VerifyHistoryOfIng1Async()
		{
			var ed1 = await (Session.GetAsync<MapOwnedEntity>(ed1_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<MapOwningEntity>(ing1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<MapOwningEntity>(ing1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<MapOwningEntity>(ing1_id, 3)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.References);

			Assert.AreEqual(1, rev2.References.Count);
			Assert.AreEqual(new KeyValuePair<string, MapOwnedEntity>("1", ed1), rev2.References.First());
			
			CollectionAssert.IsEmpty(rev3.References);
		}

		[Test]
		public async Task VerifyHistoryOfIng2Async()
		{
			var ed1 = await (Session.GetAsync<MapOwnedEntity>(ed1_id)).ConfigureAwait(false);
			var ed2 = await (Session.GetAsync<MapOwnedEntity>(ed2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<MapOwningEntity>(ing2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<MapOwningEntity>(ing2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<MapOwningEntity>(ing2_id, 3)).ConfigureAwait(false);

			Assert.AreEqual(1, rev1.References.Count);
			Assert.AreEqual(new KeyValuePair<string, MapOwnedEntity>("2", ed2), rev1.References.First());

			Assert.AreEqual(1, rev1.References.Count);
			Assert.AreEqual(new KeyValuePair<string, MapOwnedEntity>("2", ed1), rev2.References.First());

			Assert.AreEqual(2, rev3.References.Count);
			CollectionAssert.Contains(rev3.References, new KeyValuePair<string, MapOwnedEntity>("1", ed1));
			CollectionAssert.Contains(rev3.References, new KeyValuePair<string, MapOwnedEntity>("2", ed2));
		}
	}
}