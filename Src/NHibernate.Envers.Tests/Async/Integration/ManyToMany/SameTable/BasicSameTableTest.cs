//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.ManyToMany.SameTable;
using NHibernate.SqlTypes;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.ManyToMany.SameTable
{
	using System.Threading.Tasks;
	public partial class BasicSameTableTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3, 4 }, await (AuditReader().GetRevisionsAsync(typeof(ParentEntity), p1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3, 4 }, await (AuditReader().GetRevisionsAsync(typeof(ParentEntity), p2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(Child1Entity), c1_1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 5 }, await (AuditReader().GetRevisionsAsync(typeof(Child1Entity), c1_2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(Child2Entity), c2_1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 5 }, await (AuditReader().GetRevisionsAsync(typeof(Child2Entity), c2_2_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfParent1Async()
		{
			var c1_1 = await (Session.GetAsync<Child1Entity>(c1_1_id)).ConfigureAwait(false);
			var c1_2 = await (Session.GetAsync<Child1Entity>(c1_2_id)).ConfigureAwait(false);
			var c2_2 = await (Session.GetAsync<Child2Entity>(c2_2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Children1);
			CollectionAssert.AreEquivalent(new[] { c1_1 }, rev2.Children1);
			CollectionAssert.AreEquivalent(new[] { c1_1, c1_2 }, rev3.Children1);
			CollectionAssert.AreEquivalent(new[] { c1_2 }, rev4.Children1);
			CollectionAssert.IsEmpty(rev5.Children1);

			CollectionAssert.IsEmpty(rev1.Children2);
			CollectionAssert.IsEmpty(rev2.Children2);
			CollectionAssert.AreEquivalent(new[] { c2_2 }, rev3.Children2);
			CollectionAssert.AreEquivalent(new[] { c2_2 }, rev4.Children2);
			CollectionAssert.AreEquivalent(new[] { c2_2 }, rev5.Children2);
		}

		[Test]
		public async Task VerifyHistoryOfParent2Async()
		{
			var c1_1 = await (Session.GetAsync<Child1Entity>(c1_1_id)).ConfigureAwait(false);
			var c2_1 = await (Session.GetAsync<Child2Entity>(c2_1_id)).ConfigureAwait(false);
			var c2_2 = await (Session.GetAsync<Child2Entity>(c2_2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Children1);
			CollectionAssert.IsEmpty(rev2.Children1);
			CollectionAssert.AreEquivalent(new[] { c1_1 }, rev3.Children1);
			CollectionAssert.AreEquivalent(new[] { c1_1 }, rev4.Children1);
			CollectionAssert.AreEquivalent(new[] { c1_1 }, rev5.Children1);

			CollectionAssert.IsEmpty(rev1.Children2);
			CollectionAssert.AreEquivalent(new[] { c2_1 }, rev2.Children2);
			CollectionAssert.AreEquivalent(new[] { c2_1 }, rev3.Children2);
			CollectionAssert.AreEquivalent(new[] { c2_1, c2_2 }, rev4.Children2);
			CollectionAssert.AreEquivalent(new[] { c2_1 }, rev5.Children2);
		}

		[Test]
		public async Task VerifyHistoryOfChild1_1Async()
		{
			var p1 = await (Session.GetAsync<ParentEntity>(p1_id)).ConfigureAwait(false);
			var p2 = await (Session.GetAsync<ParentEntity>(p2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Parents);
			CollectionAssert.AreEquivalent(new[] { p1 }, rev2.Parents);
			CollectionAssert.AreEquivalent(new[] { p1, p2 }, rev3.Parents);
			CollectionAssert.AreEquivalent(new[] { p2 }, rev4.Parents);
			CollectionAssert.AreEquivalent(new[] { p2 }, rev5.Parents);
		}

		[Test]
		public async Task VerifyHistoryOfChild1_2Async()
		{
			var p1 = await (Session.GetAsync<ParentEntity>(p1_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Parents);
			CollectionAssert.IsEmpty(rev2.Parents);
			CollectionAssert.AreEquivalent(new[] { p1 }, rev3.Parents);
			CollectionAssert.AreEquivalent(new[] { p1 }, rev4.Parents);
			CollectionAssert.IsEmpty(rev5.Parents);
		}

		[Test]
		public async Task VerifyHistoryOfChild2_1Async()
		{
			var p2 = await (Session.GetAsync<ParentEntity>(p2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Parents);
			CollectionAssert.AreEquivalent(new[] { p2 }, rev2.Parents);
			CollectionAssert.AreEquivalent(new[] { p2 }, rev3.Parents);
			CollectionAssert.AreEquivalent(new[] { p2 }, rev4.Parents);
			CollectionAssert.AreEquivalent(new[] { p2 }, rev5.Parents);
		}

		[Test]
		public async Task VerifyHistoryOfChild2_2Async()
		{
			var p1 = await (Session.GetAsync<ParentEntity>(p1_id)).ConfigureAwait(false);
			var p2 = await (Session.GetAsync<ParentEntity>(p2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Parents);
			CollectionAssert.IsEmpty(rev2.Parents);
			CollectionAssert.AreEquivalent(new[] { p1 }, rev3.Parents);
			CollectionAssert.AreEquivalent(new[] { p1, p2 }, rev4.Parents);
			CollectionAssert.AreEquivalent(new[] { p1 }, rev5.Parents);
		}
	}
}