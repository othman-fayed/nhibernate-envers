//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.ManyToMany.BiOwned;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.ManyToMany.BiOwned
{
	using System.Threading.Tasks;
	public partial class BasicBiOwnedTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			// Although it would seem that when modifying references both entities should be marked as modified, because
			// ownly the owning side is notified (because of the bi-owning mapping), a revision is created only for
			// the entity where the collection was directly modified.
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3, 5 }, await (AuditReader().GetRevisionsAsync(typeof(ListBiOwning1Entity), o1_1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 5 }, await (AuditReader().GetRevisionsAsync(typeof(ListBiOwning1Entity), o1_2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 4 }, await (AuditReader().GetRevisionsAsync(typeof(ListBiOwning2Entity), o2_1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 4 }, await (AuditReader().GetRevisionsAsync(typeof(ListBiOwning2Entity), o2_2_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfO1_1Async()
		{
			var o2_1 = await (Session.GetAsync<ListBiOwning2Entity>(o2_1_id)).ConfigureAwait(false);
			var o2_2 = await (Session.GetAsync<ListBiOwning2Entity>(o2_2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_1_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Referencing);
			CollectionAssert.AreEquivalent(new[] { o2_1 }, rev2.Referencing);
			CollectionAssert.AreEquivalent(new[] { o2_1, o2_2 }, rev3.Referencing);
			CollectionAssert.IsEmpty(rev4.Referencing);
			CollectionAssert.AreEquivalent(new[] { o2_2 }, rev5.Referencing);
		}

		[Test]
		public async Task VerifyHistoryOfO1_2Async()
		{
			var o2_1 = await (Session.GetAsync<ListBiOwning2Entity>(o2_1_id)).ConfigureAwait(false);
			var o2_2 = await (Session.GetAsync<ListBiOwning2Entity>(o2_2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ListBiOwning1Entity>(o1_2_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Referencing);
			CollectionAssert.AreEquivalent(new[] { o2_2 }, rev2.Referencing);
			CollectionAssert.AreEquivalent(new[] { o2_2 }, rev3.Referencing);
			CollectionAssert.AreEquivalent(new[] { o2_1, o2_2 }, rev4.Referencing);
			CollectionAssert.AreEquivalent(new[] { o2_2 }, rev5.Referencing);
		}

		[Test]
		public async Task VerifyHistoryOfO2_1Async()
		{
			var o1_1 = await (Session.GetAsync<ListBiOwning1Entity>(o1_1_id)).ConfigureAwait(false);
			var o1_2 = await (Session.GetAsync<ListBiOwning1Entity>(o1_2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_1_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Referencing);
			CollectionAssert.AreEquivalent(new[] { o1_1 }, rev2.Referencing);
			CollectionAssert.AreEquivalent(new[] { o1_1 }, rev3.Referencing);
			CollectionAssert.AreEquivalent(new[] { o1_2 }, rev4.Referencing);
			CollectionAssert.IsEmpty(rev5.Referencing);
		}

		[Test]
		public async Task VerifyHistoryOfO2_2Async()
		{
			var o1_1 = await (Session.GetAsync<ListBiOwning1Entity>(o1_1_id)).ConfigureAwait(false);
			var o1_2 = await (Session.GetAsync<ListBiOwning1Entity>(o1_2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ListBiOwning2Entity>(o2_2_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Referencing);
			CollectionAssert.AreEquivalent(new[] { o1_2 }, rev2.Referencing);
			CollectionAssert.AreEquivalent(new[] { o1_1, o1_2 }, rev3.Referencing);
			CollectionAssert.AreEquivalent(new[] { o1_2 }, rev4.Referencing);
			CollectionAssert.AreEquivalent(new[] { o1_1, o1_2 }, rev5.Referencing);
		}
	}
}