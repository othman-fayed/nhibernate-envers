//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.ManyToMany.Ternary
{
	using System.Threading.Tasks;
	public partial class TernaryMapTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 4 }, await (AuditReader().GetRevisionsAsync(typeof(TernaryMapEntity), map1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3, 4 }, await (AuditReader().GetRevisionsAsync(typeof(TernaryMapEntity), map2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(StrTestPrivSeqEntity), str1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(StrTestPrivSeqEntity), str2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(IntTestPrivSeqEntity), int1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(IntTestPrivSeqEntity), int2_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfMap1Async()
		{
			var str1 = await (Session.GetAsync<StrTestPrivSeqEntity>(str1_id)).ConfigureAwait(false);
			var str2 = await (Session.GetAsync<StrTestPrivSeqEntity>(str2_id)).ConfigureAwait(false);
			var int1 = await (Session.GetAsync<IntTestPrivSeqEntity>(int1_id)).ConfigureAwait(false);
			var int2 = await (Session.GetAsync<IntTestPrivSeqEntity>(int2_id)).ConfigureAwait(false);


			var rev1 = await (AuditReader().FindAsync<TernaryMapEntity>(map1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<TernaryMapEntity>(map1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<TernaryMapEntity>(map1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<TernaryMapEntity>(map1_id, 4)).ConfigureAwait(false);

			CollectionAssert.AreEquivalent(new Dictionary<IntTestPrivSeqEntity, StrTestPrivSeqEntity> { { int1, str1 } }, rev1.Map);
			CollectionAssert.AreEquivalent(new Dictionary<IntTestPrivSeqEntity, StrTestPrivSeqEntity> { { int1, str2 } }, rev2.Map);
			CollectionAssert.AreEquivalent(new Dictionary<IntTestPrivSeqEntity, StrTestPrivSeqEntity> { { int1, str2 } }, rev3.Map);
			CollectionAssert.AreEquivalent(new Dictionary<IntTestPrivSeqEntity, StrTestPrivSeqEntity> { { int1, str2 }, { int2, str2 } }, rev4.Map);
		}

		[Test]
		public async Task VerifyHistoryOfMap2Async()
		{
			var str1 = await (Session.GetAsync<StrTestPrivSeqEntity>(str1_id)).ConfigureAwait(false);
			var str2 = await (Session.GetAsync<StrTestPrivSeqEntity>(str2_id)).ConfigureAwait(false);
			var int1 = await (Session.GetAsync<IntTestPrivSeqEntity>(int1_id)).ConfigureAwait(false);
			var int2 = await (Session.GetAsync<IntTestPrivSeqEntity>(int2_id)).ConfigureAwait(false);


			var rev1 = await (AuditReader().FindAsync<TernaryMapEntity>(map2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<TernaryMapEntity>(map2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<TernaryMapEntity>(map2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<TernaryMapEntity>(map2_id, 4)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Map);
			CollectionAssert.AreEquivalent(new Dictionary<IntTestPrivSeqEntity, StrTestPrivSeqEntity> { { int1, str1 }, { int2, str1 } }, rev2.Map);
			CollectionAssert.AreEquivalent(new Dictionary<IntTestPrivSeqEntity, StrTestPrivSeqEntity> { { int2, str1 } }, rev3.Map);
			CollectionAssert.AreEquivalent(new Dictionary<IntTestPrivSeqEntity, StrTestPrivSeqEntity> { { int1, str2 }, { int2, str1 } }, rev4.Map);
		}
	}
}