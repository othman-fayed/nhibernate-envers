//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.ManyToMany.UniDirectional;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.ManyToMany.UniDirectional
{
	using System.Threading.Tasks;
	public partial class M2MRelationNotAuditedTargetTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 4 }, await (AuditReader().GetRevisionsAsync(typeof(M2MTargetNotAuditedEntity), tnae1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3, 4 }, await (AuditReader().GetRevisionsAsync(typeof(M2MTargetNotAuditedEntity), tnae2_id)).ConfigureAwait(false));
		}


		[Test]
		public async Task VerifyHistoryNae1Async()
		{
			var uste1 = await (Session.GetAsync<UnversionedStrTestEntity>(uste1_id)).ConfigureAwait(false);
			var uste2 = await (Session.GetAsync<UnversionedStrTestEntity>(uste2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<M2MTargetNotAuditedEntity>(tnae1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<M2MTargetNotAuditedEntity>(tnae1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<M2MTargetNotAuditedEntity>(tnae1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<M2MTargetNotAuditedEntity>(tnae1_id, 4)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.References);
			CollectionAssert.AreEquivalent(new[] { uste1 }, rev2.References);
			CollectionAssert.AreEquivalent(new[] { uste1 }, rev3.References);
			CollectionAssert.AreEquivalent(new[] { uste1, uste2 }, rev4.References);
		}

		[Test]
		public async Task VerifyHistoryNae2Async()
		{
			var uste1 = await (Session.GetAsync<UnversionedStrTestEntity>(uste1_id)).ConfigureAwait(false);
			var uste2 = await (Session.GetAsync<UnversionedStrTestEntity>(uste2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<M2MTargetNotAuditedEntity>(tnae2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<M2MTargetNotAuditedEntity>(tnae2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<M2MTargetNotAuditedEntity>(tnae2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<M2MTargetNotAuditedEntity>(tnae2_id, 4)).ConfigureAwait(false);


			CollectionAssert.AreEquivalent(new[] { uste1, uste2 }, rev1.References);
			CollectionAssert.AreEquivalent(new[] { uste2 }, rev2.References);
			CollectionAssert.IsEmpty(rev3.References);
			CollectionAssert.AreEquivalent(new[] { uste1 }, rev4.References);
		}
	}
}