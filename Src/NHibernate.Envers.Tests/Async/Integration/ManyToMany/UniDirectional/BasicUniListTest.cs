//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.ManyToMany.UniDirectional;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.ManyToMany.UniDirectional
{
	using System.Threading.Tasks;
	public partial class BasicUniListTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(StrTestEntity), ed1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(StrTestEntity), ed2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3, 4, 5 }, await (AuditReader().GetRevisionsAsync(typeof(ListUniEntity), ing1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(ListUniEntity), ing2_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryIng1Async()
		{
			var ed1 = await (Session.GetAsync<StrTestEntity>(ed1_id)).ConfigureAwait(false);
			var ed2 = await (Session.GetAsync<StrTestEntity>(ed2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListUniEntity>(ing1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListUniEntity>(ing1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ListUniEntity>(ing1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ListUniEntity>(ing1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ListUniEntity>(ing1_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.References);
			CollectionAssert.AreEquivalent(new[] { ed1 }, rev2.References);
			CollectionAssert.AreEquivalent(new[] { ed1, ed2 }, rev3.References);
			CollectionAssert.AreEquivalent(new[] { ed2 }, rev4.References);
			CollectionAssert.IsEmpty(rev5.References);
		}

		[Test]
		public async Task VerifyHistoryIng2Async()
		{
			var ed1 = await (Session.GetAsync<StrTestEntity>(ed1_id)).ConfigureAwait(false);
			var ed2 = await (Session.GetAsync<StrTestEntity>(ed2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListUniEntity>(ing2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListUniEntity>(ing2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ListUniEntity>(ing2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ListUniEntity>(ing2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ListUniEntity>(ing2_id, 5)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.References);
			CollectionAssert.AreEquivalent(new[] { ed1, ed2 }, rev2.References);
			CollectionAssert.AreEquivalent(new[] { ed1, ed2 }, rev3.References);
			CollectionAssert.AreEquivalent(new[] { ed1, ed2 }, rev4.References);
			CollectionAssert.AreEquivalent(new[] { ed1, ed2 }, rev5.References);
		}
	}
}