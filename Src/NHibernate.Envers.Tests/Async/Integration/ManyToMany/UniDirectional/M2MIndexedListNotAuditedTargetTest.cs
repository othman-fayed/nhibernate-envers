//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.ManyToMany.UniDirectional;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.ManyToMany.UniDirectional
{
	using System.Threading.Tasks;
	public partial class M2MIndexedListNotAuditedTargetTest :TestBase
	{

		[Test]
		public async Task VerifyRevisionsCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (M2MIndexedListTargetNotAuditedEntity), itnae1_id)).ConfigureAwait(false))
			             .Should().Have.SameSequenceAs(1, 3);
			(await (AuditReader().GetRevisionsAsync(typeof (M2MIndexedListTargetNotAuditedEntity), itnae2_id)).ConfigureAwait(false))
			             .Should().Have.SameSequenceAs(2);
		}

		[Test]
		public async Task VerifyHistory1Async()
		{
			(await (AuditReader().FindAsync<M2MIndexedListTargetNotAuditedEntity>(itnae1_id, 1)).ConfigureAwait(false)).References
			             .Should().Have.SameSequenceAs(uste1, uste2);
			(await (AuditReader().FindAsync<M2MIndexedListTargetNotAuditedEntity>(itnae1_id, 2)).ConfigureAwait(false)).References
									 .Should().Have.SameSequenceAs(uste1, uste2);
			(await (AuditReader().FindAsync<M2MIndexedListTargetNotAuditedEntity>(itnae1_id, 3)).ConfigureAwait(false)).References
									 .Should().Have.SameSequenceAs(uste2, uste1);
		}


		[Test]
		public async Task VerifyHistory2Async()
		{
			(await (AuditReader().FindAsync<M2MIndexedListTargetNotAuditedEntity>(itnae2_id, 1)).ConfigureAwait(false)).Should().Be.Null();
			(await (AuditReader().FindAsync<M2MIndexedListTargetNotAuditedEntity>(itnae2_id, 2)).ConfigureAwait(false)).References
									 .Should().Have.SameSequenceAs(uste2);
			(await (AuditReader().FindAsync<M2MIndexedListTargetNotAuditedEntity>(itnae2_id, 3)).ConfigureAwait(false)).References
									 .Should().Have.SameSequenceAs(uste2);
		}
	}
}