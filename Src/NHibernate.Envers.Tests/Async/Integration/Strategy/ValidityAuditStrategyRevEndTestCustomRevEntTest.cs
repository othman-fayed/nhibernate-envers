//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using System.Text;
using NHibernate.Cfg;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Tests.Entities.ManyToMany.SameTable;
using NHibernate.Envers.Tests.Entities.RevEntity;
using NHibernate.SqlTypes;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Strategy
{
	using System.Threading.Tasks;
	public partial class ValidityAuditStrategyRevEndTestCustomRevEntTest : ValidityTestBase
	{

		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof(ParentEntity), p1_id)).ConfigureAwait(false))
							.Should().Have.SameSequenceAs(1, 2, 3, 4);
			(await (AuditReader().GetRevisionsAsync(typeof(ParentEntity), p2_id)).ConfigureAwait(false))
							.Should().Have.SameSequenceAs(1, 2, 3, 4);

			(await (AuditReader().GetRevisionsAsync(typeof(Child1Entity), c1_1_id)).ConfigureAwait(false))
							.Should().Have.SameSequenceAs(1);
			(await (AuditReader().GetRevisionsAsync(typeof(Child1Entity), c1_2_id)).ConfigureAwait(false))
							.Should().Have.SameSequenceAs(1, 5);

			(await (AuditReader().GetRevisionsAsync(typeof(Child2Entity), c2_1_id)).ConfigureAwait(false))
							.Should().Have.SameSequenceAs(1);
			(await (AuditReader().GetRevisionsAsync(typeof(Child2Entity), c2_2_id)).ConfigureAwait(false))
							.Should().Have.SameSequenceAs(1, 5);
		}

		[Test]
		public async Task VerifyHistoryOfParent1Async()
		{
			var c1_1 = await (Session.GetAsync<Child1Entity>(c1_1_id)).ConfigureAwait(false);
			var c1_2 = await (Session.GetAsync<Child1Entity>(c1_2_id)).ConfigureAwait(false);
			var c2_2 = await (Session.GetAsync<Child2Entity>(c2_2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ParentEntity>(p1_id, 5)).ConfigureAwait(false);

			rev1.Children1.Should().Be.Empty();
			rev2.Children1.Should().Have.SameValuesAs(c1_1);
			rev3.Children1.Should().Have.SameValuesAs(c1_1, c1_2);
			rev4.Children1.Should().Have.SameValuesAs(c1_2);
			rev5.Children1.Should().Be.Empty();

			rev1.Children2.Should().Be.Empty();
			rev2.Children2.Should().Be.Empty();
			rev3.Children2.Should().Have.SameValuesAs(c2_2);
			rev4.Children2.Should().Have.SameValuesAs(c2_2);
			rev5.Children2.Should().Have.SameValuesAs(c2_2);
		}

		[Test]
		public async Task VerifyHistoryOfParent2Async()
		{
			var c1_1 = await (Session.GetAsync<Child1Entity>(c1_1_id)).ConfigureAwait(false);
			var c2_1 = await (Session.GetAsync<Child2Entity>(c2_1_id)).ConfigureAwait(false);
			var c2_2 = await (Session.GetAsync<Child2Entity>(c2_2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<ParentEntity>(p2_id, 5)).ConfigureAwait(false);

			rev1.Children1.Should().Be.Empty();
			rev2.Children1.Should().Be.Empty();
			rev3.Children1.Should().Have.SameValuesAs(c1_1);
			rev4.Children1.Should().Have.SameValuesAs(c1_1);
			rev5.Children1.Should().Have.SameValuesAs(c1_1);

			rev1.Children2.Should().Be.Empty();
			rev2.Children2.Should().Have.SameValuesAs(c2_1);
			rev3.Children2.Should().Have.SameValuesAs(c2_1);
			rev4.Children2.Should().Have.SameValuesAs(c2_1, c2_2);
			rev5.Children2.Should().Have.SameValuesAs(c2_1);
		}

		[Test]
		public async Task VerifyHistoryOfChild1_1Async()
		{
			var p1 = await (Session.GetAsync<ParentEntity>(p1_id)).ConfigureAwait(false);
			var p2 = await (Session.GetAsync<ParentEntity>(p2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child1Entity>(c1_1_id, 5)).ConfigureAwait(false);

			rev1.Parents.Should().Be.Empty();
			rev2.Parents.Should().Have.SameValuesAs(p1);
			rev3.Parents.Should().Have.SameValuesAs(p1, p2);
			rev4.Parents.Should().Have.SameValuesAs(p2);
			rev5.Parents.Should().Have.SameValuesAs(p2);
		}

		[Test]
		public async Task VerifyHistoryOfChild1_2Async()
		{
			var p1 = await (Session.GetAsync<ParentEntity>(p1_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child1Entity>(c1_2_id, 5)).ConfigureAwait(false);

			rev1.Parents.Should().Be.Empty();
			rev2.Parents.Should().Be.Empty();
			rev3.Parents.Should().Have.SameValuesAs(p1);
			rev4.Parents.Should().Have.SameValuesAs(p1);
			rev5.Parents.Should().Be.Empty();
		}

		[Test]
		public async Task VerifyHistoryOfChild2_1Async()
		{
			var p2 = await (Session.GetAsync<ParentEntity>(p2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child2Entity>(c2_1_id, 5)).ConfigureAwait(false);

			rev1.Parents.Should().Be.Empty();
			rev2.Parents.Should().Have.SameValuesAs(p2);
			rev3.Parents.Should().Have.SameValuesAs(p2);
			rev4.Parents.Should().Have.SameValuesAs(p2);
			rev5.Parents.Should().Have.SameValuesAs(p2);
		}

		[Test]
		public async Task VerifyHistoryOfChild2_2Async()
		{
			var p1 = await (Session.GetAsync<ParentEntity>(p1_id)).ConfigureAwait(false);
			var p2 = await (Session.GetAsync<ParentEntity>(p2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child2Entity>(c2_2_id, 5)).ConfigureAwait(false);

			rev1.Parents.Should().Be.Empty();
			rev2.Parents.Should().Be.Empty();
			rev3.Parents.Should().Have.SameValuesAs(p1);
			rev4.Parents.Should().Have.SameValuesAs(p1, p2);
			rev5.Parents.Should().Have.SameValuesAs(p1);
		}

	}
}