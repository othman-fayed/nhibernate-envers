//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.ManyToMany;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Strategy
{
	using System.Threading.Tasks;
	public partial class ValidityAuditStrategyManyToManyTest : ValidityTestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3, 4, 5 }, await (AuditReader().GetRevisionsAsync(typeof(SetOwningEntity),ingId)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3, 4, 5 }, await (AuditReader().GetRevisionsAsync(typeof(SetOwnedEntity),edId)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfIngAsync()
		{
			var ed = new SetOwnedEntity {Id = edId, Data = "child"};

			(await (AuditReader().FindAsync<SetOwningEntity>(ingId, 1)).ConfigureAwait(false)).References.Should().Be.Empty();
			(await (AuditReader().FindAsync<SetOwningEntity>(ingId, 2)).ConfigureAwait(false)).References.Should().Have.SameSequenceAs(ed);
			(await (AuditReader().FindAsync<SetOwningEntity>(ingId, 3)).ConfigureAwait(false)).References.Should().Be.Empty();
			(await (AuditReader().FindAsync<SetOwningEntity>(ingId, 4)).ConfigureAwait(false)).References.Should().Have.SameSequenceAs(ed);
			(await (AuditReader().FindAsync<SetOwningEntity>(ingId, 5)).ConfigureAwait(false)).References.Should().Be.Empty();

		}

		[Test]
		public async Task VerifyHistoryOfEdAsync()
		{
			var ing = new SetOwningEntity { Id = ingId, Data = "parent" };

			(await (AuditReader().FindAsync<SetOwnedEntity>(edId, 1)).ConfigureAwait(false)).Referencing.Should().Be.Empty();
			(await (AuditReader().FindAsync<SetOwnedEntity>(edId, 2)).ConfigureAwait(false)).Referencing.Should().Have.SameSequenceAs(ing);
			(await (AuditReader().FindAsync<SetOwnedEntity>(edId, 3)).ConfigureAwait(false)).Referencing.Should().Be.Empty();
			(await (AuditReader().FindAsync<SetOwnedEntity>(edId, 4)).ConfigureAwait(false)).Referencing.Should().Have.SameSequenceAs(ing);
			(await (AuditReader().FindAsync<SetOwnedEntity>(edId, 5)).ConfigureAwait(false)).Referencing.Should().Be.Empty();
		}
	}
}