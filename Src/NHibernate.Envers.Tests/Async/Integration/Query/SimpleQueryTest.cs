//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Criterion;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.Ids;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Query
{
	using System.Threading.Tasks;
	public partial class SimpleQueryTest : TestBase
	{

		[Test]
		public async Task EntitiesIdQueryAsync()
		{
			var ver2 = await (AuditReader().CreateQuery()
						.ForEntitiesAtRevision(typeof (StrIntTestEntity), 2)
						.Add(AuditEntity.Id().Eq(id2))
						.GetSingleResultAsync<StrIntTestEntity>()).ConfigureAwait(false);
			Assert.AreEqual(new StrIntTestEntity { Id = id2, Str = "a", Number = 20 }, ver2);
		}

		[Test]
		public async Task EntitiesPropertyEqualsQueryAsync()
		{
			var ver1 = await (AuditReader().CreateQuery()
						.ForEntitiesAtRevision(typeof(StrIntTestEntity), 1)
						.Add(AuditEntity.Property("Str").Eq("a"))
						.GetResultListAsync()).ConfigureAwait(false);
			var ver2 = await (AuditReader().CreateQuery()
						.ForEntitiesAtRevision(typeof(StrIntTestEntity), 2)
						.Add(AuditEntity.Property("Str").Eq("a"))
						.GetResultListAsync()).ConfigureAwait(false);
			var ver3 = await (AuditReader().CreateQuery()
						.ForEntitiesAtRevision(typeof(StrIntTestEntity), 3)
						.Add(AuditEntity.Property("Str").Eq("a"))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[]
						{
							new StrIntTestEntity {Id = id1, Str = "a", Number = 10}, 
							new StrIntTestEntity {Id = id2, Str = "a", Number = 10}
						}, ver1);
			CollectionAssert.AreEquivalent(new[]
						{
							new StrIntTestEntity {Id = id2, Str = "a", Number = 20}
						}, ver2);
			CollectionAssert.AreEquivalent(new[]
						{
							new StrIntTestEntity {Id = id2, Str = "a", Number = 20},
							new StrIntTestEntity {Id = id3, Str = "a", Number = 5}
						}, ver3);
		}

		[Test]
		public async Task EntitiesPropertyLeQueryAsync()
		{
			var ver1 = await (AuditReader().CreateQuery()
						.ForEntitiesAtRevision(typeof(StrIntTestEntity), 1)
						.Add(AuditEntity.Property("Number").Le(10))
						.GetResultListAsync()).ConfigureAwait(false);
			var ver2 = await (AuditReader().CreateQuery()
						.ForEntitiesAtRevision(typeof(StrIntTestEntity), 2)
						.Add(AuditEntity.Property("Number").Le(10))
						.GetResultListAsync()).ConfigureAwait(false);
			var ver3 = await (AuditReader().CreateQuery()
						.ForEntitiesAtRevision(typeof(StrIntTestEntity), 3)
						.Add(AuditEntity.Property("Number").Le(10))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[]
						{
							new StrIntTestEntity {Id = id1, Str = "a", Number = 10}, 
							new StrIntTestEntity {Id = id2, Str = "a", Number = 10},
							new StrIntTestEntity {Id = id3, Str = "b", Number = 5}
						}, ver1);
			CollectionAssert.AreEquivalent(new[]
						{
							new StrIntTestEntity {Id = id1, Str = "aBc", Number = 10},
							new StrIntTestEntity {Id = id3, Str = "b", Number = 5}
						}, ver2);
			CollectionAssert.AreEquivalent(new[]
						{
							new StrIntTestEntity {Id = id1, Str = "aBc", Number = 10},
							new StrIntTestEntity {Id = id3, Str = "a", Number = 5}
						}, ver3);
		}

		[Test]
		public async Task RevisionsPropertyEqQueryAsync()
		{
			var revs_id1 = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.Property("Str").Le("a"))
						.Add(AuditEntity.Id().Eq(id1))
						.GetResultListAsync()).ConfigureAwait(false);
			var revs_id2 = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.Property("Str").Le("a"))
						.Add(AuditEntity.Id().Eq(id2))
						.GetResultListAsync()).ConfigureAwait(false);
			var revs_id3 = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.Property("Str").Le("a"))
						.Add(AuditEntity.Id().Eq(id3))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[] { 1 }, revs_id1);
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, revs_id2);
			CollectionAssert.AreEquivalent(new[] { 3 }, revs_id3);
		}

		[Test]
		public async Task RevisionsPropertyEqQueryForHistoryAsync()
		{
			var revs_id1 = (await (AuditReader().CreateQuery().ForHistoryOf<StrIntTestEntity, DefaultRevisionEntity>()
						.Add(AuditEntity.Property("Str").Le("a"))
						.Add(AuditEntity.Id().Eq(id1))
						.ResultsAsync()).ConfigureAwait(false)).Select(x=> x.RevisionEntity.Id);
			var revs_id2 = (await (AuditReader().CreateQuery().ForHistoryOf<StrIntTestEntity, DefaultRevisionEntity>()
						.Add(AuditEntity.Property("Str").Le("a"))
						.Add(AuditEntity.Id().Eq(id2))
						.ResultsAsync()).ConfigureAwait(false)).Select(x => x.RevisionEntity.Id);
			var revs_id3 = (await (AuditReader().CreateQuery().ForHistoryOf<StrIntTestEntity, DefaultRevisionEntity>()
						.Add(AuditEntity.Property("Str").Le("a"))
						.Add(AuditEntity.Id().Eq(id3))
						.ResultsAsync()).ConfigureAwait(false)).Select(x => x.RevisionEntity.Id);
			CollectionAssert.AreEquivalent(new[] { 1 }, revs_id1);
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, revs_id2);
			CollectionAssert.AreEquivalent(new[] { 3 }, revs_id3);
		}

		[Test]
		public async Task SelectEntitiesQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
							.ForRevisionsOfEntity(typeof (StrIntTestEntity), true, false)
							.Add(AuditEntity.Id().Eq(id1))
							.GetResultListAsync<StrIntTestEntity>()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[]
						{
							new StrIntTestEntity {Id = id1, Str = "a", Number = 10},
							new StrIntTestEntity {Id = id1, Str = "aBc", Number = 10}
						}, result);
		}

		[Test]
		public async Task SelectEntitiesAndRevisionsQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
				.Add(AuditEntity.Id().Eq(id1))
				.GetResultListAsync<IList>()).ConfigureAwait(false);

			Assert.AreEqual(new StrIntTestEntity { Id = id1, Str = "a", Number = 10 }, result[0][0]);
			Assert.AreEqual(new StrIntTestEntity { Id = id1, Str = "aBc", Number = 10 }, result[1][0]);
			Assert.AreEqual(new StrIntTestEntity { Id = id1 }, result[2][0]);

			Assert.AreEqual(1, ((DefaultRevisionEntity)result[0][1]).Id);
			Assert.AreEqual(2, ((DefaultRevisionEntity)result[1][1]).Id);
			Assert.AreEqual(4, ((DefaultRevisionEntity)result[2][1]).Id);

			Assert.AreEqual(RevisionType.Added, result[0][2]);
			Assert.AreEqual(RevisionType.Modified, result[1][2]);
			Assert.AreEqual(RevisionType.Deleted, result[2][2]);
		}

		[Test]
		public async Task SelectRevisionTypeQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
				.AddProjection(AuditEntity.RevisionType())
				.Add(AuditEntity.Id().Eq(id1))
				.GetResultListAsync<RevisionType>()).ConfigureAwait(false);

			Assert.AreEqual(RevisionType.Added, result[0]);
			Assert.AreEqual(RevisionType.Modified, result[1]);
			Assert.AreEqual(RevisionType.Deleted, result[2]);
		}

		[Test]
		public async Task SelectRevisionTypeQueryUsingRevisionInfoAsync()
		{
			var result = await (AuditReader().CreateQuery().ForHistoryOf<StrIntTestEntity, DefaultRevisionEntity>()
				.Add(AuditEntity.Id().Eq(id1))
				.ResultsAsync()).ConfigureAwait(false);
			result.Select(x => x.Operation).Should().Have.SameSequenceAs(RevisionType.Added, RevisionType.Modified, RevisionType.Deleted);
		}

		[Test]
		public async Task EmptyRevisionOfEntityQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForRevisionsOfEntity(typeof (StrIntTestEntity), false, true)
				.GetResultListAsync()).ConfigureAwait(false);
			Assert.AreEqual(7, result.Count);
		}

		[Test]
		public async Task EmptyConjunctionRevisionOfEntityQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
				.Add(AuditEntity.Conjunction())
				.GetResultListAsync()).ConfigureAwait(false);
			Assert.AreEqual(7, result.Count);
		}

		[Test]
		public async Task EmptyDisjunctionRevisionOfEntityQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
				.Add(AuditEntity.Disjunction())
				.GetResultListAsync()).ConfigureAwait(false);
			Assert.AreEqual(0, result.Count);
		}

		[Test]
		public async Task ShouldFindEntitiesAddedAtRevisionAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForEntitiesModifiedAtRevision(typeof (StrIntTestEntity).FullName, 1)
				.GetResultListAsync<StrIntTestEntity>()).ConfigureAwait(false);
			var revisionType = await (AuditReader().CreateQuery()
				.ForEntitiesModifiedAtRevision(typeof(StrIntTestEntity), 1)
				.AddProjection(AuditEntity.RevisionType())
				.Add(AuditEntity.Id().Eq(id1))
				.GetSingleResultAsync<RevisionType>()).ConfigureAwait(false);

			result.Should().Have.SameValuesAs(new StrIntTestEntity {Id = id1, Str = "a", Number = 10},
			                                    new StrIntTestEntity {Id = id2, Str = "a", Number = 10},
			                                    new StrIntTestEntity {Id = id3, Str = "b", Number = 5});

			revisionType.Should().Be.EqualTo(RevisionType.Added);
		}

		[Test]
		public async Task ShouldFindEntitiesModifiedAtRevisionAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForEntitiesModifiedAtRevision(typeof(StrIntTestEntity), 2)
				.GetResultListAsync<StrIntTestEntity>()).ConfigureAwait(false);
			var revisionType = await (AuditReader().CreateQuery()
				.ForEntitiesModifiedAtRevision(typeof(StrIntTestEntity), 2)
				.AddProjection(AuditEntity.RevisionType())
				.Add(AuditEntity.Id().Eq(id1))
				.GetSingleResultAsync<RevisionType>()).ConfigureAwait(false);

			result.Should().Have.SameValuesAs(new StrIntTestEntity { Id = id1, Str = "aBc", Number = 10 },
															new StrIntTestEntity { Id = id2, Str = "a", Number = 20 });

			revisionType.Should().Be.EqualTo(RevisionType.Modified);
		}

		[Test]
		public async Task ShouldFindEntitiesRemovedAtRevisionAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForEntitiesModifiedAtRevision(typeof(StrIntTestEntity).FullName, 4)
				.GetResultListAsync<StrIntTestEntity>()).ConfigureAwait(false);
			var revisionType = await (AuditReader().CreateQuery()
				.ForEntitiesModifiedAtRevision(typeof(StrIntTestEntity), 4)
				.AddProjection(AuditEntity.RevisionType())
				.Add(AuditEntity.Id().Eq(id1))
				.GetSingleResultAsync<RevisionType>()).ConfigureAwait(false);

			result.Should().Have.SameValuesAs(new StrIntTestEntity { Id = id1 });

			revisionType.Should().Be.EqualTo(RevisionType.Deleted);
		}

		[Test]
		public async Task VerifyEntityNotModifiedAtRevisionAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForEntitiesModifiedAtRevision(typeof(StrIntTestEntity), 3)
						.Add(AuditEntity.Id().Eq(id1))
						.GetResultListAsync<StrIntTestEntity>()).ConfigureAwait(false);
			result.Should().Be.Empty();
		}

		[Test]
		public async Task VerifyNoEntitiesModifiedAtRevisionAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForEntitiesModifiedAtRevision(typeof(StrIntTestEntity).FullName, 5)
						.GetResultListAsync<StrIntTestEntity>()).ConfigureAwait(false);
			result.Should().Be.Empty();
		}

		[Test]
		public async Task VerifyBetweenInsideDisjunctionAsync()
		{
			var result = await (AuditReader().CreateQuery()
				.ForRevisionsOf<StrIntTestEntity>()
				.Add(AuditEntity.Disjunction()
				     	.Add(AuditEntity.Property("Number").Between(0, 5))
				     	.Add(AuditEntity.Property("Number").Between(20, 100)))
				.ResultsAsync()).ConfigureAwait(false);
			foreach (var number in result.Select(entity => entity.Number))
			{
				Assert.That(number, Is.InRange(0, 5).Or.InRange(20, 100));
			}
		}

		[Test]
		public async Task VerifyInsensitiveLikeAsync()
		{
			var site1 = new StrIntTestEntity {Id = id1, Number = 10, Str = "aBc"};
			(await (AuditReader().CreateQuery()
			             .ForRevisionsOf<StrIntTestEntity>(false)
			             .Add(AuditEntity.Property("Str").InsensitiveLike("abc"))
			             .SingleAsync()).ConfigureAwait(false))
			             .Should().Be.EqualTo(site1);
		}

		[Test]
		public async Task VerifyInsensitiveLikeWithMatchModeAsync()
		{
			var site1 = new StrIntTestEntity { Id = id1, Number = 10, Str = "aBc" };
			(await (AuditReader().CreateQuery()
									 .ForRevisionsOf<StrIntTestEntity>(false)
									 .Add(AuditEntity.Property("Str").InsensitiveLike("BC", MatchMode.Anywhere))
									 .SingleAsync()).ConfigureAwait(false))
									 .Should().Be.EqualTo(site1);
		}

		[Test]
		public async Task VerifyIdPropertyRestrictionAsync()
		{
			var ver2 = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision<StrIntTestEntity>(2)
				.Add(AuditEntity.Property("Id").Eq(id2))
				.SingleAsync()).ConfigureAwait(false);
			ver2.Number.Should().Be.EqualTo(20);
			ver2.Str.Should().Be.EqualTo("a");
		}

		[Test]
		public async Task VerifyEmbeddedIdPropertyRestrictionAsync()
		{
			var ver2 = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision<EmbIdTestEntity>(2)
				.Add(AuditEntity.Property("Id.X").Eq(embId.X))
				.Add(AuditEntity.Property("Id.Y").Eq(embId.Y))
				.SingleAsync()).ConfigureAwait(false);
			ver2.Str1.Should().Be.EqualTo("something");
		}
	}
}