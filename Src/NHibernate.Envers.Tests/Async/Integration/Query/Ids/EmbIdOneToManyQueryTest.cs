//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities.Ids;
using NHibernate.Envers.Tests.Entities.OneToMany.Ids;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Query.Ids
{
	using System.Threading.Tasks;
	public partial class EmbIdOneToManyQueryTest : TestBase
	{

		[Test]
		public async Task VerifyEntitiesReferencedToId3Async()
		{
			var rev1_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof (SetRefIngEmbIdEntity), 1)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev1 = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 1)
				.Add(AuditEntity.Property("Reference").Eq(new SetRefEdEmbIdEntity {Id = id3}))
				.GetResultListAsync()).ConfigureAwait(false);

			var rev2_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 2)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev2 = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 2)
				.Add(AuditEntity.Property("Reference").Eq(new SetRefEdEmbIdEntity { Id = id3 }))
				.GetResultListAsync()).ConfigureAwait(false);

			var rev3_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 3)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev3 = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 3)
				.Add(AuditEntity.Property("Reference").Eq(new SetRefEdEmbIdEntity { Id = id3 }))
				.GetResultListAsync()).ConfigureAwait(false);

			Assert.AreEqual(rev1, rev1_related);
			Assert.AreEqual(rev2, rev2_related);
			Assert.AreEqual(rev3, rev3_related);

			CollectionAssert.IsEmpty(rev1);
			CollectionAssert.AreEquivalent(new[]
			                               	{
			                               		new SetRefIngEmbIdEntity { Id = id1, Data = "x" }
			                               	}, rev2);
			CollectionAssert.AreEquivalent(new[]
			                               	{
			                               		new SetRefIngEmbIdEntity { Id = id1, Data = "x" }, 
												new SetRefIngEmbIdEntity{ Id = id2, Data = "y" }
			                               	}, rev3);
		}

		[Test]
		public async Task VerifyEntitiesReferencedToId4Async()
		{
			var rev1_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 1)
				.Add(AuditEntity.RelatedId("Reference").Eq(id4))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev2_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 2)
				.Add(AuditEntity.RelatedId("Reference").Eq(id4))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev3_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 3)
				.Add(AuditEntity.RelatedId("Reference").Eq(id4))
				.GetResultListAsync()).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1_related);
			CollectionAssert.AreEquivalent(new[]{new SetRefIngEmbIdEntity{ Id = id2, Data = "y" }}, rev2_related);
			CollectionAssert.IsEmpty(rev3_related);
		}

		[Test]
		public async Task VerifyEntitiesReferencedByIng1ToId3Async()
		{
			var rev1_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 1)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.Add(AuditEntity.Id().Eq(id1))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev2_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof (SetRefIngEmbIdEntity), 2)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.Add(AuditEntity.Id().Eq(id1))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev3_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof (SetRefIngEmbIdEntity), 3)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.Add(AuditEntity.Id().Eq(id1))
				.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.IsEmpty(rev1_related);
			CollectionAssert.AreEquivalent(new[] { new SetRefIngEmbIdEntity { Id = id1, Data = "x" } }, rev2_related);
			CollectionAssert.AreEquivalent(new[] { new SetRefIngEmbIdEntity { Id = id1, Data = "x" } }, rev3_related);
		}

		[Test]
		public async Task VerifyEntitiesReferencedByIng2ToId3Async()
		{
			var rev1_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 1)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.Add(AuditEntity.Id().Eq(id2))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev2_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 2)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.Add(AuditEntity.Id().Eq(id2))
				.GetResultListAsync()).ConfigureAwait(false);
			var rev3_related = await (AuditReader().CreateQuery()
				.ForEntitiesAtRevision(typeof(SetRefIngEmbIdEntity), 3)
				.Add(AuditEntity.RelatedId("Reference").Eq(id3))
				.Add(AuditEntity.Id().Eq(id2))
				.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.IsEmpty(rev1_related);
			CollectionAssert.IsEmpty(rev2_related);
			CollectionAssert.AreEquivalent(new[] { new SetRefIngEmbIdEntity { Id = id2, Data = "y" } }, rev3_related);
		}
	}
}