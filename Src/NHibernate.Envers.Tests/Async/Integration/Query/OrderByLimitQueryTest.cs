//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Query
{
	using System.Threading.Tasks;
	public partial class OrderByLimitQueryTest : TestBase
	{

		[Test]
		public async Task VerifyEntitiesOrderLimitByQueryRev1Async()
		{
			var res_0_to_1 = await (AuditReader().CreateQuery()
							.ForEntitiesAtRevision(typeof(IntTestEntity), 1)
							.AddOrder(AuditEntity.Property("Number").Desc())
							.SetFirstResult(0)
							.SetMaxResults(2)
							.GetResultListAsync()).ConfigureAwait(false);
			var res_2_to_3 = await (AuditReader().CreateQuery()
							.ForEntitiesAtRevision(typeof(IntTestEntity), 1)
							.AddOrder(AuditEntity.Property("Number").Desc())
							.SetFirstResult(2)
							.SetMaxResults(2)
							.GetResultListAsync()).ConfigureAwait(false);
			var res_empty = await (AuditReader().CreateQuery()
							.ForEntitiesAtRevision(typeof(IntTestEntity), 1)
							.AddOrder(AuditEntity.Property("Number").Desc())
							.SetFirstResult(4)
							.SetMaxResults(2)
							.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEqual(new[]
										{
			                          		new IntTestEntity {Id = id1, Number = 12}, new IntTestEntity {Id = id3, Number = 8}
			                          	}, res_0_to_1);
			CollectionAssert.AreEqual(new[]
										{
			                          		new IntTestEntity {Id = id2, Number = 5}, new IntTestEntity {Id = id4, Number = 1}
			                          	}, res_2_to_3);
			CollectionAssert.IsEmpty(res_empty);
		}

		[Test]
		public async Task VerifyEntitiesOrderLimitByQueryRev2Async()
		{
			var res_0_to_1 = await (AuditReader().CreateQuery()
							.ForEntitiesAtRevision(typeof(IntTestEntity), 2)
							.AddOrder(AuditEntity.Property("Number").Desc())
							.SetFirstResult(0)
							.SetMaxResults(2)
							.GetResultListAsync()).ConfigureAwait(false);
			var res_2_to_3 = await (AuditReader().CreateQuery()
							.ForEntitiesAtRevision(typeof(IntTestEntity), 2)
							.AddOrder(AuditEntity.Property("Number").Desc())
							.SetFirstResult(2)
							.SetMaxResults(2)
							.GetResultListAsync()).ConfigureAwait(false);
			var res_4 = await (AuditReader().CreateQuery()
							.ForEntitiesAtRevision(typeof(IntTestEntity), 2)
							.AddOrder(AuditEntity.Property("Number").Desc())
							.SetFirstResult(4)
							.SetMaxResults(2)
							.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEqual(new[]
										{
			                          		new IntTestEntity {Id = id4, Number = 15}, new IntTestEntity {Id = id3, Number = 8}
			                          	}, res_0_to_1);
			CollectionAssert.AreEqual(new[]
										{
			                          		new IntTestEntity {Id = id2, Number = 5}, new IntTestEntity {Id = id5, Number = 3}
			                          	}, res_2_to_3);
			CollectionAssert.AreEqual(new[]
										{
			                          		new IntTestEntity {Id = id1, Number = 0}
			                          	}, res_4);
		}
	}
}