//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NHibernate.Envers.Query;
using NHibernate.SqlCommand;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Query.Traverse
{
	using System.Threading.Tasks;
	public partial class AssociationToOneQueryTest : TestBase
	{


		[Test]
		public async Task ShouldTraverseAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision<Car>(1)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.Add(AuditEntity.Property("Name").Like("Ford%")).SingleAsync()).ConfigureAwait(false))
				.Id.Should().Be.EqualTo(fordId);
		}

		[Test]
		public async Task ShouldDoMultipleTraverseAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision<Car>(1)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.TraverseRelation("Address", JoinType.InnerJoin)
				.Add(AuditEntity.Property("Number").Eq(20)).SingleAsync()).ConfigureAwait(false))
				.Id.Should().Be.EqualTo(toyotaId);
		}

		[Test]
		public async Task ShouldTraverseWithUpListAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision<Car>(1)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.Add(AuditEntity.Property("Age").Ge(30))
				.Add(AuditEntity.Property("Age").Lt(40))
				.Up()
				.AddOrder(AuditEntity.Property("Make").Asc())
				.ResultsAsync()).ConfigureAwait(false)).Select(x => x.Id)
				.Should().Have.SameSequenceAs(fordId, toyotaId);
		}

		[Test]
		public async Task ShouldTraverseWithUpAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision<Car>(2)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.Add(AuditEntity.Property("Age").Ge(30))
				.Add(AuditEntity.Property("Age").Lt(40))
				.Up()
				.AddOrder(AuditEntity.Property("Make").Asc()).SingleAsync()).ConfigureAwait(false))
				.Id.Should().Be.EqualTo(fordId);
		}

		[Test]
		public async Task ShouldOrderOnUpAscendingAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision<Car>(1)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.TraverseRelation("Address", JoinType.InnerJoin)
				.AddOrder(AuditEntity.Property("Number").Asc())
				.Up()
				.AddOrder(AuditEntity.Property("Age").Asc())
				.ResultsAsync()).ConfigureAwait(false)).Select(x => x.Id)
				.Should().Have.SameSequenceAs(vwId, fordId, toyotaId);
		}

		[Test]
		public async Task ShouldOrderOnUpDescendingAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision<Car>(1)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.TraverseRelation("Address", JoinType.InnerJoin)
				.AddOrder(AuditEntity.Property("Number").Asc())
				.Up()
				.AddOrder(AuditEntity.Property("Age").Desc())
				.ResultsAsync()).ConfigureAwait(false)).Select(x => x.Id)
				.Should().Have.SameSequenceAs(fordId, vwId, toyotaId);
		}

		[Test]
		public async Task ShouldDoProjectionAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof (Car), 2)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.AddProjection(AuditEntity.Property("Age"))
				.AddOrder(AuditEntity.Property("Age").Asc())
				.GetResultListAsync<int>()).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(20, 30, 40);
		}

		[Test]
		public async Task ShouldDoProjectionOnTraversedPropertyNotDistinctAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof(Car), 2)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.AddOrder(AuditEntity.Property("Age").Asc())
				.TraverseRelation("Address", JoinType.InnerJoin)
				.AddProjection(AuditEntity.SelectEntity(false))
				.GetResultListAsync<Address>()).ConfigureAwait(false)).Select(x => x.Id)
				.Should().Have.SameSequenceAs(addressId1, addressId1, addressId2);
		}

		[Test]
		public async Task ShouldDoProjectionOnTraversedPropertyDistinctAsync()
		{
			(await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof(Car), 2)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.TraverseRelation("Address", JoinType.InnerJoin)
				.AddProjection(AuditEntity.SelectEntity(true))
				.AddOrder(AuditEntity.Property("Number").Asc())
				.GetResultListAsync<Address>()).ConfigureAwait(false)).Select(x => x.Id)
				.Should().Have.SameSequenceAs(addressId1, addressId2);
		}

		[Test]
		public async Task ShouldDoMultipleProjectionsAsync()
		{
			var result = await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof(Car), 2)
				.TraverseRelation("Owner", JoinType.InnerJoin)
				.AddOrder(AuditEntity.Property("Age").Asc())
				.AddProjection(AuditEntity.SelectEntity(false))
				.TraverseRelation("Address", JoinType.InnerJoin)
				.AddProjection(AuditEntity.Property("Number"))
				.GetResultListAsync()).ConfigureAwait(false);

			result.Count.Should().Be.EqualTo(3);

			var index0 = (object[]) result[0];
			((Person) index0[0]).Id.Should().Be.EqualTo(vwOwnerId);
			index0[1].Should().Be.EqualTo(5);

			var index1 = (object[])result[1];
			((Person)index1[0]).Id.Should().Be.EqualTo(fordOwnerId);
			index1[1].Should().Be.EqualTo(5);

			var index2 = (object[])result[2];
			((Person)index2[0]).Id.Should().Be.EqualTo(toyotaOwnerId);
			index2[1].Should().Be.EqualTo(20);
		}
	}
}