//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Query
{
	using System.Threading.Tasks;
	public partial class RevisionConstraintQueryTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionLtQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof (StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber().Distinct())
						.Add(AuditEntity.RevisionNumber().Lt(3))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[]{1, 2}, result);
		}

		[Test]
		public async Task VerifyRevisionGeQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber().Distinct())
						.Add(AuditEntity.RevisionNumber().Ge(2))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[] { 2, 3, 4 }, result);
		}

		[Test]
		public async Task VerifyRevisionLeWithPropertyQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.RevisionNumber().Lt(3))
						.Add(AuditEntity.Property("Str").Eq("a"))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[] { 1 }, result);
		}

		[Test]
		public async Task VerifyRevisionGtWithPropertyQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.RevisionNumber().Gt(1))
						.Add(AuditEntity.Property("Number").Lt(10))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[] { 3, 4 }, result);
		}

		[Test]
		public async Task VerifyRevisionProjectionQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof (StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber().Max())
						.AddProjection(AuditEntity.RevisionNumber().Count())
						.AddProjection(AuditEntity.RevisionNumber().CountDistinct())
						.AddProjection(AuditEntity.RevisionNumber().Min())
						.Add(AuditEntity.Id().Eq(id1))
						.GetSingleResultAsync<object[]>()).ConfigureAwait(false);
			Assert.AreEqual(4, result[0]);
			Assert.AreEqual(4, result[1]);
			Assert.AreEqual(4, result[2]);
			Assert.AreEqual(1, result[3]);
		}

		[Test]
		public async Task VerifyRevisionOrderQueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.Id().Eq(id1))
						.AddOrder(AuditEntity.RevisionNumber().Desc())
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEqual(new[]{4,3,2,1}, result);
		}

		[Test]
		public async Task VerifyRevisionCountQueryAsync()
		{
			// The query shouldn't be ordered as always, otherwise - we get an exception.
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber().Count())
						.Add(AuditEntity.Id().Eq(id1))
						.GetSingleResultAsync<long>()).ConfigureAwait(false);
			Assert.AreEqual(4, result);
		}

		[Test]
		public async Task VerifyRevisionTypeEqQueryAsync()
		{
			// The query shouldn't be ordered as always, otherwise - we get an exception.
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), true, true)
						.Add(AuditEntity.Id().Eq(id1))
						.Add(AuditEntity.RevisionType().Eq(RevisionType.Modified))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEqual(
				new[]
					{
						new StrIntTestEntity {Str = "d", Number = 10, Id = id1}, 
						new StrIntTestEntity {Str = "d", Number = 1, Id = id1},
						new StrIntTestEntity {Str = "d", Number = 5, Id = id1}
					}, result);
		}

		[Test]
		public async Task VerifyRevisionTypeNeQueryAsync()
		{
			// The query shouldn't be ordered as always, otherwise - we get an exception.
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), true, true)
						.Add(AuditEntity.Id().Eq(id1))
						.Add(AuditEntity.RevisionType().Ne(RevisionType.Modified))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEqual(
				new[]
					{
						new StrIntTestEntity {Str = "a", Number = 10, Id = id1}
					}, result);
		}
	}
}