//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.RevEntity;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Query
{
	using System.Threading.Tasks;
	public partial class CustomRevEntityQueryTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionsOfId1QueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof (StrIntTestEntity), false, true)
						.Add(AuditEntity.Id().Eq(id1))
						.GetResultListAsync()).ConfigureAwait(false);

			Assert.AreEqual(new StrIntTestEntity {Str = "a", Number = 10, Id = id1}, ((IList)result[0])[0]);
			var customRevEntity1 = ((IList) result[0])[1];
			Assert.IsInstanceOf<CustomRevEntity>(customRevEntity1);
			Assert.AreEqual(1, ((CustomRevEntity)customRevEntity1).CustomId);

			Assert.AreEqual(new StrIntTestEntity { Str = "c", Number = 10, Id = id1 }, ((IList)result[1])[0]);
			var customRevEntity2 = ((IList)result[1])[1];
			Assert.IsInstanceOf<CustomRevEntity>(customRevEntity2);
			Assert.AreEqual(2, ((CustomRevEntity)customRevEntity2).CustomId);
		}

		[Test]
		public async Task VerifyRevisionsOfId2QueryAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.Add(AuditEntity.Id().Eq(id2))
						.GetResultListAsync()).ConfigureAwait(false);

			Assert.AreEqual(new StrIntTestEntity { Str = "b", Number = 15, Id = id2 }, ((IList)result[0])[0]);
			var customRevEntity1 = ((IList)result[0])[1];
			Assert.IsInstanceOf<CustomRevEntity>(customRevEntity1);
			Assert.AreEqual(1, ((CustomRevEntity)customRevEntity1).CustomId);
		}

		[Test]
		public async Task VerifyRevisionPropertyRestrictionAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof (StrIntTestEntity), false, true)
						.Add(AuditEntity.Id().Eq(id1))
						.Add(AuditEntity.RevisionProperty("CustomTimestamp").Ge(timestamp))
						.GetResultListAsync()).ConfigureAwait(false);
			Assert.AreEqual(new StrIntTestEntity { Str = "c", Number = 10, Id = id1 }, ((IList)result[0])[0]);
			var customRevEntity1 = ((IList)result[0])[1];
			Assert.IsInstanceOf<CustomRevEntity>(customRevEntity1);
			Assert.IsTrue(((CustomRevEntity)customRevEntity1).CustomTimestamp >= timestamp);
		}
	}
}