//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Query
{
	using System.Threading.Tasks;
	public partial class MaximalizePropertyQueryTest : TestBase
	{

		[Test]
		public async Task VerifyMaximzeWithIdEqAsync()
		{
			var revsId1 = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof (StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.Property("Number").Maximize()
							.Add(AuditEntity.Id().Eq(id2)))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEqual(new[]{2, 3, 4}, revsId1);
		}

		[Test]
		public async Task VerifyMinimizeWithPropertyEqAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.Property("Number").Minimize()
							.Add(AuditEntity.Property("Str").Eq("a")))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEqual(new[] { 1 }, result);
		}

		[Test]
		public async Task VerifyMaximizeRevisionAsync()
		{
			var result = await (AuditReader().CreateQuery()
						.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
						.AddProjection(AuditEntity.RevisionNumber())
						.Add(AuditEntity.RevisionNumber().Maximize()
							.Add(AuditEntity.Property("Number").Eq(10)))
						.GetResultListAsync()).ConfigureAwait(false);
			CollectionAssert.AreEquivalent(new[]{2}, result);
		}

		[Test]
		public async Task VerifyMaximizeInDisjunctionAsync()
		{
			var idsToQuery = new[] {id1, id3};
			var disjuction = AuditEntity.Disjunction();
			foreach (var id in idsToQuery)
			{
				disjuction.Add(AuditEntity.RevisionNumber().Maximize().Add(AuditEntity.Id().Eq(id)));
			}
			var result = await (AuditReader().CreateQuery()
				.ForRevisionsOf<StrIntTestEntity>(true)
				.Add(disjuction)
				.ResultsAsync()).ConfigureAwait(false);
			var idsSeen = new HashSet<int>();
			foreach (var entity in result)
			{
				var id = entity.Id;
				idsToQuery.Should().Contain(id);
				idsSeen.Add(id).Should().Be.True();
			}
		}

		[Test]
		public async Task VerifyAllLatestRevisionOfEntityTypeAsync()
		{
			var result =await (AuditReader().CreateQuery()
				.ForRevisionsOfEntity(typeof(StrIntTestEntity), false, true)
				.Add(AuditEntity.RevisionNumber().Maximize().ComputeAggregationInInstanceContext())
				.AddOrder(AuditEntity.Property("id" ).Asc())
				.GetResultListAsync()).ConfigureAwait(false);

			result.Count.Should().Be.EqualTo(4);

			var result1 = (object[])result[0];
			var result2 = (object[])result[1];
			var result3 = (object[])result[2];
			var result4 = (object[])result[3];
			checkRevisionData(result1, 4, RevisionType.Modified, new StrIntTestEntity{Id=id1, Number = 5, Str = "d"});
			checkRevisionData(result2, 4, RevisionType.Modified, new StrIntTestEntity{Id=id2, Number = 20, Str = "a"});
			checkRevisionData(result3, 1, RevisionType.Added, new StrIntTestEntity{Id=id3, Number = 42, Str = "c"});
			checkRevisionData(result4, 5, RevisionType.Deleted, new StrIntTestEntity{Id=id4, Number = 0, Str = null});
		}
	}
}