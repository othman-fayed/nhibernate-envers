//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.Ids;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Query
{
	using System.Threading.Tasks;
	public partial class AggregateQueryTest : TestBase
	{

		[Test]
		public async Task VerifyEntitiesAvgMaxQueryAsync()
		{
			var ver1 = (object[])await (AuditReader().CreateQuery()
					.ForEntitiesAtRevision(typeof(IntTestEntity), 1)
					.AddProjection(AuditEntity.Property("Number").Max())
					.AddProjection(AuditEntity.Property("Number").Function("avg"))
					.GetSingleResultAsync()).ConfigureAwait(false);
			var ver2 = (object[])await (AuditReader().CreateQuery()
					.ForEntitiesAtRevision(typeof(IntTestEntity), 2)
					.AddProjection(AuditEntity.Property("Number").Max())
					.AddProjection(AuditEntity.Property("Number").Function("avg"))
					.GetSingleResultAsync()).ConfigureAwait(false);
			var ver3 = (object[])await (AuditReader().CreateQuery()
					.ForEntitiesAtRevision(typeof(IntTestEntity), 3)
					.AddProjection(AuditEntity.Property("Number").Max())
					.AddProjection(AuditEntity.Property("Number").Function("avg"))
					.GetSingleResultAsync()).ConfigureAwait(false);

			Assert.AreEqual(10, ver1[0]);
			Assert.AreEqual(6, ver1[1]);

			Assert.AreEqual(10, ver2[0]);
			Assert.AreEqual(6, ver2[1]);

			Assert.AreEqual(52, ver3[0]);
			Assert.AreEqual(20, ver3[1]);
		}

		[Test]
		public async Task VerifyEntityIdProjectionAsync()
		{
			var maxId = await (AuditReader().CreateQuery().ForRevisionsOfEntity(typeof (IntTestEntity), true, true)
			                         .AddProjection(AuditEntity.Id().Max())
			                         .Add(AuditEntity.RevisionNumber().Gt(2))
			                         .GetSingleResultAsync()).ConfigureAwait(false);
			maxId.Should().Be.EqualTo(2);
		}

		[Test]
		public async Task VerifyEntityIdRestrictionAsync()
		{
			(await (AuditReader().CreateQuery().ForRevisionsOf<IntTestEntity>(true)
			    .Add(AuditEntity.Id().Between(2, 3))
			    .ResultsAsync()).ConfigureAwait(false))
					.Should().Have.SameValuesAs(new IntTestEntity {Id = 2, Number = 10}, 
												new IntTestEntity {Id = 3, Number = 8},
												new IntTestEntity {Id = 2, Number = 52});
		}

		[Test]
		public async Task VerifyEntityIdOrderingAsync()
		{
			(await (AuditReader().CreateQuery().ForRevisionsOf<IntTestEntity>(true)
			             .Add(AuditEntity.RevisionNumber().Lt(2))
			             .AddOrder(AuditEntity.Id().Desc())
			             .ResultsAsync()).ConfigureAwait(false))
			             .Should().Have.SameSequenceAs(new IntTestEntity {Id = 2, Number = 10}, new IntTestEntity {Id = 1, Number = 2});
		}

		[Test]
		public async Task VerifyUnusualIdFieldNameAsync()
		{
			(await (AuditReader().CreateQuery().ForRevisionsOf<UnusualIdNamingEntity>(true)
			             .Add(AuditEntity.Id().Like("Id1"))
			             .SingleAsync()).ConfigureAwait(false))
			             .Should().Be.EqualTo(new UnusualIdNamingEntity {UniqueField = "Id1", VariousData = "data1"});
		}

		[Test]
		public async Task VerifyEntityIdModifiedFlagNotSupportedAsync()
		{
			try
			{
				await (AuditReader().CreateQuery().ForRevisionsOf<IntTestEntity>(true)
				             .Add(AuditEntity.Id().HasChanged())
				             .ResultsAsync()).ConfigureAwait(false);
			}
			catch (NotSupportedException)
			{
				try
				{
					await (AuditReader().CreateQuery().ForRevisionsOf<IntTestEntity>(true)
											 .Add(AuditEntity.Id().HasNotChanged())
											 .ResultsAsync()).ConfigureAwait(false);
				}
				catch (NotSupportedException)
				{
					return;
				}
				Assert.Fail();
			}
			Assert.Fail();
		}
	}
}