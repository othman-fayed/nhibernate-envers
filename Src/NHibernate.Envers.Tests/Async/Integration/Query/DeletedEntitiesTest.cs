//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Query
{
	using System.Threading.Tasks;
	public partial class DeletedEntitiesTest : TestBase
	{

		[Test]
		public async Task VerifyProjectionsInEntitiesAtRevisionAsync()
		{
			Assert.AreEqual(2, (await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof (StrIntTestEntity), 1).GetResultListAsync()).ConfigureAwait(false)).Count);
			Assert.AreEqual(1, (await (AuditReader().CreateQuery().ForEntitiesAtRevision(typeof (StrIntTestEntity), 2).GetResultListAsync()).ConfigureAwait(false)).Count);

			Assert.AreEqual(2, 
				(await (AuditReader().CreateQuery()
					.ForEntitiesAtRevision(typeof(StrIntTestEntity), 1).AddProjection(AuditEntity.Id().Count()).GetResultListAsync()).ConfigureAwait(false))[0]);
			Assert.AreEqual(1,
				(await (AuditReader().CreateQuery()
					.ForEntitiesAtRevision(typeof(StrIntTestEntity), 2).AddProjection(AuditEntity.Id().Count()).GetResultListAsync()).ConfigureAwait(false))[0]);
		}

		[Test]
		public async Task VerifyRevisionOfEntityWithoutDeleteAsync()
		{
			var result = await (AuditReader().CreateQuery()
					.ForRevisionsOfEntity(typeof (StrIntTestEntity), false, false)
					.Add(AuditEntity.Id().Eq(id2))
					.GetResultListAsync()).ConfigureAwait(false);

			Assert.AreEqual(1, result.Count);
			var res = (object[]) result[0];
			Assert.AreEqual(new StrIntTestEntity { Str = "b", Number = 11, Id=id2 }, res[0]);
			Assert.AreEqual(1, ((DefaultRevisionEntity)res[1]).Id);
			Assert.AreEqual(RevisionType.Added, res[2]);
		}
	}
}