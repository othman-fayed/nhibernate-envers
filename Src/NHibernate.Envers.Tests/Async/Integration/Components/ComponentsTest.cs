//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.Components;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Components
{
	using System.Threading.Tasks;
	public partial class ComponentsTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			CollectionAssert.AreEqual(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(ComponentTestEntity), id1)).ConfigureAwait(false));
			CollectionAssert.AreEqual(new[] { 1, 2, 4 }, await (AuditReader().GetRevisionsAsync(typeof(ComponentTestEntity), id2)).ConfigureAwait(false));
			CollectionAssert.AreEqual(new[] { 1, 3 }, await (AuditReader().GetRevisionsAsync(typeof(ComponentTestEntity), id3)).ConfigureAwait(false));
			CollectionAssert.AreEqual(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(ComponentTestEntity), id4)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOf1Async()
		{
			var ver1 = new ComponentTestEntity { Id = id1, Comp1 = new Component1 { Str1 = "a", Str2 = "b" } };
			var ver2 = new ComponentTestEntity { Id = id1, Comp1 = new Component1 { Str1 = "a'", Str2 = "b'" } };

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<ComponentTestEntity>(id1, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ComponentTestEntity>(id1, 2)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ComponentTestEntity>(id1, 3)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ComponentTestEntity>(id1, 4)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOf2Async()
		{
			var ver1 = new ComponentTestEntity { Id = id2, Comp1 = new Component1 { Str1 = "a2", Str2 = "b2" } };
			var ver2 = new ComponentTestEntity { Id = id2, Comp1 = new Component1 { Str1 = "a2'", Str2 = "b2" } };

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<ComponentTestEntity>(id2, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ComponentTestEntity>(id2, 2)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ComponentTestEntity>(id2, 3)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<ComponentTestEntity>(id2, 4)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOf3Async()
		{
			var ver1 = new ComponentTestEntity { Id = id3, Comp1 = new Component1 { Str1 = "a3", Str2 = "b3" } };
			var ver2 = new ComponentTestEntity { Id = id3, Comp1 = new Component1 { Str1 = "a3", Str2 = "b3'" } };

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<ComponentTestEntity>(id3, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<ComponentTestEntity>(id3, 2)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ComponentTestEntity>(id3, 3)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ComponentTestEntity>(id3, 4)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOf4Async()
		{
			var ver1 = new ComponentTestEntity { Id = id4 };
			var ver2 = new ComponentTestEntity { Id = id4, Comp1 = new Component1 { Str1 = "n" } };
			var ver3 = new ComponentTestEntity { Id = id4 };

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<ComponentTestEntity>(id4, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<ComponentTestEntity>(id4, 2)).ConfigureAwait(false));
			Assert.AreEqual(ver3, await (AuditReader().FindAsync<ComponentTestEntity>(id4, 3)).ConfigureAwait(false));
			Assert.AreEqual(ver3, await (AuditReader().FindAsync<ComponentTestEntity>(id4, 4)).ConfigureAwait(false));
		}
	}
}