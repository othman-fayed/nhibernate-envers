//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Flush
{
	using System.Threading.Tasks;
	public partial class DoubleFlushAddModTest :TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(StrTestEntity), id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfId1Async()
		{
			var ver1 = new StrTestEntity { Id = id, Str = "y"};
			var ver2 = new StrTestEntity { Id = id, Str = "z" };

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<StrTestEntity>(id, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<StrTestEntity>(id, 2)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyRevisionTypesAsync()
		{
			//rk - avoid casting to ilist. generics?
		    var results = await (AuditReader().CreateQuery()
		                .ForRevisionsOfEntity(typeof(StrTestEntity), false, true)
		                .Add(AuditEntity.Id().Eq(id))
		                .GetResultListAsync()).ConfigureAwait(false);
			Assert.AreEqual(RevisionType.Added, ((IList)results[0])[2]);
			Assert.AreEqual(RevisionType.Modified, ((IList)results[1])[2]);
		}
	}
}