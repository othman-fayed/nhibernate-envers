//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.OneToMany;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Cache
{
	using System.Threading.Tasks;
	public partial class OneToManyCacheTest : TestBase
	{

		[Test]
		public async Task VerifyCacheReferenceAfterFindAsync()
		{
			var ed1_rev1 = await (AuditReader().FindAsync<SetRefEdEntity>(ed1_id, 1)).ConfigureAwait(false);
			var ing1_rev1 = await (AuditReader().FindAsync<SetRefIngEntity>(ing1_id, 1)).ConfigureAwait(false);
			var ing2_rev1 = await (AuditReader().FindAsync<SetRefIngEntity>(ing2_id, 1)).ConfigureAwait(false);

			Assert.AreSame(ing1_rev1.Reference, ed1_rev1);
			Assert.AreSame(ing2_rev1.Reference, ed1_rev1);

		}

		[Test]
		public async Task VerifyCacheReferenceAccessAfterCollectionAccessRev1Async()
		{
			var ed1_rev1 = await (AuditReader().FindAsync<SetRefEdEntity>(ed1_id, 1)).ConfigureAwait(false);
			Assert.AreEqual(2, ed1_rev1.Reffering.Count);
			foreach (var setRefIngEntity in ed1_rev1.Reffering)
			{
				Assert.AreSame(setRefIngEntity.Reference, ed1_rev1);
			}
		}

		[Test]
		public async Task VerifyCacheReferenceAccessAfterCollectionAccessRev2Async()
		{
			var ed1_rev2 = await (AuditReader().FindAsync<SetRefEdEntity>(ed1_id, 1)).ConfigureAwait(false);
			Assert.AreEqual(2, ed1_rev2.Reffering.Count);
			foreach (var setRefIngEntity in ed1_rev2.Reffering)
			{
				Assert.AreSame(setRefIngEntity.Reference, ed1_rev2);
			}
		}

		[Test]
		public async Task VerifyCacheFindAfterCollectionAccessRev1Async()
		{
			var ed1_rev1 = await (AuditReader().FindAsync<SetRefEdEntity>(ed1_id, 1)).ConfigureAwait(false);

			// Reading the collection
			Assert.AreEqual(2, ed1_rev1.Reffering.Count);

			var ing1_rev1 = await (AuditReader().FindAsync<SetRefIngEntity>(ing1_id, 1)).ConfigureAwait(false);
			var ing2_rev1 = await (AuditReader().FindAsync<SetRefIngEntity>(ing2_id, 1)).ConfigureAwait(false);
			foreach (var setRefIngEntity in ed1_rev1.Reffering)
			{
				if (setRefIngEntity == ing1_rev1 || setRefIngEntity == ing2_rev1)
					continue;
				Assert.Fail();
			}
		}
	}
}