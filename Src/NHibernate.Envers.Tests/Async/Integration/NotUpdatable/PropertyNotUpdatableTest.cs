//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NHibernate.Envers.Configuration;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.NotUpdatable
{
	using System.Threading.Tasks;
	public partial class PropertyNotUpdatableTest : TestBase
	{
		
		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (PropertyNotUpdatableEntity), id)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2, 3, 4);
		}

		[Test]
		public async Task VerifyHistoryOfIdAsync()
		{
			var ver1 = new PropertyNotUpdatableEntity
			           	{
			           		Id = id,
			           		Data = "data",
			           		ConstantData1 = "constant data 1",
			           		ConstantData2 = "constant data 2"
			           	};
			var ver2 = new PropertyNotUpdatableEntity
			           	{
			           		Id = id,
								Data = "modified data",
			           		ConstantData1 = "constant data 1",
			           		ConstantData2 = "constant data 2"
			           	};
			var ver3 = new PropertyNotUpdatableEntity
			           	{
			           		Id = id,
								Data = "another modified data",
			           		ConstantData1 = "constant data 1",
			           		ConstantData2 = "constant data 2"
			           	};

			(await (AuditReader().FindAsync<PropertyNotUpdatableEntity>(id, 1)).ConfigureAwait(false))
				.Should().Be.EqualTo(ver1);
			(await (AuditReader().FindAsync<PropertyNotUpdatableEntity>(id, 2)).ConfigureAwait(false))
				.Should().Be.EqualTo(ver2);
			(await (AuditReader().FindAsync<PropertyNotUpdatableEntity>(id, 3)).ConfigureAwait(false))
				.Should().Be.EqualTo(ver3);
		}

		[Test]
		public async Task VerifyDeleteStateAsync()
		{
			var delete = new PropertyNotUpdatableEntity
			             	{
			             		Id = id,
			             		Data = "another modified data",
			             		ConstantData1 = "constant data 1",
			             		ConstantData2 = "constant data 2"
			             	};
			(await (AuditReader().CreateQuery().ForRevisionsOf<PropertyNotUpdatableEntity>(true).ResultsAsync()).ConfigureAwait(false)).Last()
				.Should().Be.EqualTo(delete);
		}
	}
}