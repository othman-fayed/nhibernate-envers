//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.NotInsertable.ManyToOne
{
	using System.Threading.Tasks;
	public partial class ManyToOneNotInsertableTest : TestBase
	{


		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(NotInsertableEntityType), type_id1)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(NotInsertableEntityType), type_id2)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(ManyToOneNotInsertableEntity), mto_id1)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryAsync()
		{
			var ver1 = await (AuditReader().FindAsync<ManyToOneNotInsertableEntity>(mto_id1, 1)).ConfigureAwait(false);
			var ver2 = await (AuditReader().FindAsync<ManyToOneNotInsertableEntity>(mto_id1, 2)).ConfigureAwait(false);
			var ver3 = await (AuditReader().FindAsync<ManyToOneNotInsertableEntity>(mto_id1, 3)).ConfigureAwait(false);

			var type1 = await (Session.GetAsync<NotInsertableEntityType>(type_id1)).ConfigureAwait(false);
			var type2 = await (Session.GetAsync<NotInsertableEntityType>(type_id2)).ConfigureAwait(false);

			Assert.IsNull(ver1);
			Assert.AreEqual(type1, ver2.Type);
			Assert.AreEqual(type2, ver3.Type);
		}
	}
}