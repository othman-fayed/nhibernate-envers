//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.Ids;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Ids
{
	using System.Threading.Tasks;
	public partial class CompositeIdTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 3, 4 }, await (AuditReader().GetRevisionsAsync(typeof(EmbIdTestEntity), id1)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 2, 3, 4, 5 }, await (AuditReader().GetRevisionsAsync(typeof(EmbIdTestEntity), id2)).ConfigureAwait(false));

			CollectionAssert.AreEquivalent(new[] { 1, 3, 4 }, await (AuditReader().GetRevisionsAsync(typeof(EmbIdWithCustomTypeTestEntity), id5)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 2, 3, 4 }, await (AuditReader().GetRevisionsAsync(typeof(EmbIdWithCustomTypeTestEntity), id6)).ConfigureAwait(false));
		}


		[Test]
		public async Task VerifyHistoryOfId1Async()
		{
			var ver1 = new EmbIdTestEntity { Id = id1, Str1 = "x" };
			var ver2 = new EmbIdTestEntity { Id = id1, Str1 = "x2" };

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<EmbIdTestEntity>(id1, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<EmbIdTestEntity>(id1, 2)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<EmbIdTestEntity>(id1, 3)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<EmbIdTestEntity>(id1, 4)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<EmbIdTestEntity>(id1, 5)).ConfigureAwait(false));
		}


		[Test]
		public async Task VerifyHistoryOfId2Async()
		{
			var ver1 = new EmbIdTestEntity { Id = id2, Str1 = "y" };
			var ver2 = new EmbIdTestEntity { Id = id2, Str1 = "y2" };
			var ver3 = new EmbIdTestEntity { Id = id2, Str1 = "y3" };

			Assert.IsNull(await (AuditReader().FindAsync<EmbIdTestEntity>(id2, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<EmbIdTestEntity>(id2, 2)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<EmbIdTestEntity>(id2, 3)).ConfigureAwait(false));
			Assert.AreEqual(ver3, await (AuditReader().FindAsync<EmbIdTestEntity>(id2, 4)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<EmbIdTestEntity>(id2, 5)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfId5Async()
		{
			var ver1 = new EmbIdWithCustomTypeTestEntity { Id = id5, Str1 = "c" };
			var ver2 = new EmbIdWithCustomTypeTestEntity { Id = id5, Str1 = "c2" };
			var ver3 = new EmbIdWithCustomTypeTestEntity { Id = id5, Str1 = "c3" };

			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id5, 1)).ConfigureAwait(false)).Should().Be.EqualTo(ver1);
			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id5, 2)).ConfigureAwait(false)).Should().Be.EqualTo(ver1);
			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id5, 3)).ConfigureAwait(false)).Should().Be.EqualTo(ver2);
			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id5, 4)).ConfigureAwait(false)).Should().Be.EqualTo(ver3);
			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id5, 5)).ConfigureAwait(false)).Should().Be.EqualTo(ver3);
		}

		[Test]
		public async Task VerifyHistoryOfId6Async()
		{
			var ver1 = new EmbIdWithCustomTypeTestEntity { Id = id6, Str1 = "d" };
			var ver2 = new EmbIdWithCustomTypeTestEntity { Id = id6, Str1 = "d2" };

			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id6, 1)).ConfigureAwait(false)).Should().Be.Null();
			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id6, 2)).ConfigureAwait(false)).Should().Be.EqualTo(ver1);
			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id6, 3)).ConfigureAwait(false)).Should().Be.EqualTo(ver2);
			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id6, 4)).ConfigureAwait(false)).Should().Be.Null();
			(await (AuditReader().FindAsync<EmbIdWithCustomTypeTestEntity>(id6, 5)).ConfigureAwait(false)).Should().Be.Null();
		}
	}
}