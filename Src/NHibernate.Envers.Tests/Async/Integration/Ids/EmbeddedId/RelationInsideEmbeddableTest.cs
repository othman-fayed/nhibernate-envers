//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Ids.EmbeddedId
{
	using System.Threading.Tasks;
	public partial class RelationInsideEmbeddableTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionsCountAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (PurchaseOrder), orderId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2);
			(await (AuditReader().GetRevisionsAsync(typeof (Item), itemId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 3);
		}

		[Test]
		public async Task VerifyHistoryOfPurchaseOrderAsync()
		{
			var item = new Item
			           	{
			           		Id = new ItemId {Model = "TV", Producer = new Producer {Id = 1, Name = "Sony"}, Version = 1},
			           		Price = 100.5
			           	};
			(await (AuditReader().FindAsync<PurchaseOrder>(orderId, 1)).ConfigureAwait(false))
				.Should().Be.EqualTo(new PurchaseOrder {Id = orderId, Item = item});
			(await (AuditReader().FindAsync<PurchaseOrder>(orderId, 2)).ConfigureAwait(false))
				.Should().Be.EqualTo(new PurchaseOrder {Id = orderId, Item = item, Comment = "fragile"});
		}

		[Test]
		public async Task VerifyHistoryOfItemAsync()
		{
			(await (AuditReader().FindAsync<Item>(itemId, 1)).ConfigureAwait(false))
				.Should().Be.EqualTo(new Item {Id = itemId, Price = 100.5});
			(await (AuditReader().FindAsync<Item>(itemId, 3)).ConfigureAwait(false))
				.Should().Be.EqualTo(new Item { Id = itemId, Price = 110 });
		} 
	}
}