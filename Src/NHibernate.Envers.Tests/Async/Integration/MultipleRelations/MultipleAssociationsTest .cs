//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.MultipleRelations
{
	using System.Threading.Tasks;
	public partial class MultipleAssociationsTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionsCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof(Person), lukaszId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 4, 5);
			(await (AuditReader().GetRevisionsAsync(typeof(Person), kingaId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2, 5);
			(await (AuditReader().GetRevisionsAsync(typeof(Address), warsawId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 5);
			(await (AuditReader().GetRevisionsAsync(typeof(Address), cracowId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(2, 3);
		}

		[Test]
		public async Task VerifyHistoryOfLukaszAsync()
		{
			var lukasz = new Person {Id = lukaszId, Name = "Lukasz"};
			var warsaw = new Address {Id = warsawId, City = "Warsaw"};
			lukasz.Addresses.Add(warsaw);
			lukasz.OwnedAddresses.Add(warsaw);

			var ver1 = await (AuditReader().FindAsync<Person>(lukaszId, 1)).ConfigureAwait(false);
			lukasz.Should().Be.EqualTo(ver1);
			lukasz.Addresses.Should().Have.SameValuesAs(ver1.Addresses);
			lukasz.OwnedAddresses.Should().Have.SameValuesAs(ver1.OwnedAddresses);

			lukasz.Name = "Lucas";

			var ver4 = await (AuditReader().FindAsync<Person>(lukaszId, 4)).ConfigureAwait(false);
			lukasz.Should().Be.EqualTo(ver4);

			lukasz.OwnedAddresses.Remove(warsaw);

			var ver5 = await (AuditReader().FindAsync<Person>(lukaszId, 5)).ConfigureAwait(false);
			lukasz.OwnedAddresses.Should().Have.SameValuesAs(ver5.OwnedAddresses);
		}

		[Test]
		public async Task VerifyHistoryOfKingaAsync()
		{
			var kinga = new Person { Id = kingaId, Name = "Kinga" };
			var warsaw = new Address { Id = warsawId, City = "Warsaw" };
			kinga.Addresses.Add(warsaw);

			var ver1 = await (AuditReader().FindAsync<Person>(kingaId, 1)).ConfigureAwait(false);
			kinga.Should().Be.EqualTo(ver1);
			kinga.Addresses.Should().Have.SameValuesAs(ver1.Addresses);
			kinga.OwnedAddresses.Should().Have.SameValuesAs(ver1.OwnedAddresses);

			var cracow = new Address {Id = cracowId, City = "Cracow"};
			kinga.OwnedAddresses.Add(cracow);
			kinga.Addresses.Add(cracow);

			var ver2 = await (AuditReader().FindAsync<Person>(kingaId, 2)).ConfigureAwait(false);
			kinga.Should().Be.EqualTo(ver2);
			kinga.Addresses.Should().Have.SameValuesAs(ver2.Addresses);
			kinga.OwnedAddresses.Should().Have.SameValuesAs(ver2.OwnedAddresses);

			kinga.OwnedAddresses.Add(warsaw);
			cracow.City = "Krakow";

			var ver5 = await (AuditReader().FindAsync<Person>(kingaId, 5)).ConfigureAwait(false);
			kinga.Addresses.Should().Have.SameValuesAs(ver5.Addresses);
			kinga.OwnedAddresses.Should().Have.SameValuesAs(ver5.OwnedAddresses);
		}

		[Test]
		public async Task VerifyHistoryOfCracowAsync()
		{
			var cracow = new Address { Id = cracowId, City = "Cracow" };
			var kinga = new Person { Id = kingaId, Name = "Kinga" };
			cracow.Tenants.Add(kinga);
			cracow.Landlord = kinga;

			var ver2 = await (AuditReader().FindAsync<Address>(cracowId, 2)).ConfigureAwait(false);
			ver2.Should().Be.EqualTo(cracow);
			ver2.Tenants.Should().Have.SameValuesAs(cracow.Tenants);
			ver2.Landlord.Id.Should().Be.EqualTo(cracow.Landlord.Id);

			cracow.City = "Krakow";
			var ver3 = await (AuditReader().FindAsync<Address>(cracowId, 3)).ConfigureAwait(false);
			ver3.Should().Be.EqualTo(cracow);
		}

		[Test]
		public async Task VerifyHistoryOfWarsawAsync()
		{
			var warsaw = new Address { Id = warsawId, City = "Warsaw" };
			var kinga = new Person { Id = kingaId, Name = "Kinga" };
			var lukasz = new Person { Id = lukaszId, Name = "Lukasz" };
			warsaw.Tenants.Add(kinga);
			warsaw.Tenants.Add(lukasz);
			warsaw.Landlord = lukasz;

			var ver1 = await (AuditReader().FindAsync<Address>(warsawId, 1)).ConfigureAwait(false);
			ver1.Should().Be.EqualTo(warsaw);
			ver1.Tenants.Should().Have.SameValuesAs(warsaw.Tenants);
			ver1.Landlord.Id.Should().Be.EqualTo(warsaw.Landlord.Id);

			warsaw.Landlord = kinga;

			var ver5 = await (AuditReader().FindAsync<Address>(warsawId, 5)).ConfigureAwait(false);
			ver5.Landlord.Id.Should().Be.EqualTo(warsaw.Landlord.Id);
		}
	}
}