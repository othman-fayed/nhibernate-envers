//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.EntityNames.SingleAssociatedNotAudited
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class ReadEntityAssociatedNotAuditedTest : TestBase
	{

		private async Task loadDataOnSessionAndAuditReaderAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			currentPerson1 = (Person)await (Session.GetAsync("Personaje", id_pers1, cancellationToken)).ConfigureAwait(false);
			person2 = (Person) await (Session.GetAsync("Personaje", id_pers2, cancellationToken)).ConfigureAwait(false);

			currentCar1 = await (Session.GetAsync<Car>(id_car1, cancellationToken)).ConfigureAwait(false);

			car1 = await (AuditReader().FindAsync<Car>(id_car1, 1, cancellationToken)).ConfigureAwait(false);
			car2 = await (AuditReader().FindAsync<Car>(id_car2, 2, cancellationToken)).ConfigureAwait(false);
		}

		private async Task checkEntityNamesAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			AuditReader().GetEntityName(id_car1, 1, car1)
				.Should().Be.EqualTo(await (Session.GetEntityNameAsync(currentCar1, cancellationToken)).ConfigureAwait(false));
		}

		[Test]
		public async Task ShouldObtainEntityNameAssociationWithEntityNameAndNotAuditedModeAsync()
		{
			await (loadDataOnSessionAndAuditReaderAsync()).ConfigureAwait(false);
			checkEntities();
			await (checkEntityNamesAsync()).ConfigureAwait(false);
		}

		[Test]
		public async Task ShouldtestObtainEntityNameAssociationWithEntityNameAndNotAuditedModeInNewSessionAsync()
		{
			ForceNewSession();
			await (loadDataOnSessionAndAuditReaderAsync()).ConfigureAwait(false);
			checkEntities();
			await (checkEntityNamesAsync()).ConfigureAwait(false);
		}
	}
}