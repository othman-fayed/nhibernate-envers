//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.EntityNames.OneToManyAudited
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class ReadEntityWithAuditedCollectionTest : TestBase
	{

		private async Task loadDataOnSessionAndAuditReaderAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			person1_1 = (Person)await (AuditReader().FindAsync("Personaje", id_pers1, 1, cancellationToken)).ConfigureAwait(false);
			car1_1 = await (AuditReader().FindAsync<Car>(id_car1, 2, cancellationToken)).ConfigureAwait(false);
			var car2 = await (AuditReader().FindAsync<Car>(id_car2, 2, cancellationToken)).ConfigureAwait(false);

			// navigate through relations to load objects
			foreach (var foo in car1_1.Owners.Select(owner => owner.Name))
			{
			}
			foreach (var foo in car2.Owners.Select(owner => owner.Name))
			{
			}
		}

		private async Task checkEntityNamesAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			AuditReader().GetEntityName(id_car1, 2, car1_1)
				.Should().Be.EqualTo(await (Session.GetEntityNameAsync(await (Session.GetAsync<Car>(id_car1, cancellationToken)).ConfigureAwait(false), cancellationToken)).ConfigureAwait(false));
			AuditReader().GetEntityName(id_pers1, 1, person1_1)
				.Should().Be.EqualTo("Personaje");
		}

		[Test]
		public async Task ShouldObtainEntityNameAuditedCollectionWithEntityNameAsync()
		{
			await (loadDataOnSessionAndAuditReaderAsync()).ConfigureAwait(false);
			await (checkEntityNamesAsync()).ConfigureAwait(false);
		}

		[Test]
		public async Task ShouldObtainEntityNameAuditedCollectionWithEntityNameInNewSessionAsync()
		{
			ForceNewSession();
			await (loadDataOnSessionAndAuditReaderAsync()).ConfigureAwait(false);
			await (checkEntityNamesAsync()).ConfigureAwait(false);
		}
	}
}