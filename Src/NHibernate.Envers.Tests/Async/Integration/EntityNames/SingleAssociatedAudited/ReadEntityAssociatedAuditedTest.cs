//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.EntityNames.SingleAssociatedAudited
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class ReadEntityAssociatedAuditedTest : TestBase
	{
 
		private async Task loadDataOnSessionAndAuditReaderAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			currentCar1 = await (Session.GetAsync<Car>(id_car1, cancellationToken)).ConfigureAwait(false);
			currentPerson1 = (Person) await (Session.GetAsync("Personaje", id_pers1, cancellationToken)).ConfigureAwait(false);
			car1 = await (AuditReader().FindAsync<Car>(id_car1, 1, cancellationToken)).ConfigureAwait(false);
			person1 = car1.Owner;
		}

		private async Task checkEntitiesAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			currentPerson1.Age.Should().Not.Be.EqualTo(person1.Age);

			var person2 = (Person)await (Session.GetAsync("Personaje", id_pers2, cancellationToken)).ConfigureAwait(false);
			var car2 = await (AuditReader().FindAsync<Car>(id_car2, 2, cancellationToken)).ConfigureAwait(false);
			var person2_1 = car2.Owner;
			person2.Age.Should().Be.EqualTo(person2_1.Age);
		}

		private async Task checkEntityNamesAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			AuditReader().GetEntityName(id_car1, 1, car1)
				.Should().Be.EqualTo(await (Session.GetEntityNameAsync(currentCar1, cancellationToken)).ConfigureAwait(false));
			AuditReader().GetEntityName(id_pers1, 1, person1)
				.Should().Be.EqualTo("Personaje");
		}

		[Test]
		public async Task ShouldGetAssociationWithEntityNameAsync()
		{
			await (loadDataOnSessionAndAuditReaderAsync()).ConfigureAwait(false);
			await (checkEntitiesAsync()).ConfigureAwait(false);
			await (checkEntityNamesAsync()).ConfigureAwait(false);
		}

		[Test]
		public async Task ShouldGetAssociationWithEntityNameInNewSessionAsync()
		{
			ForceNewSession();
			await (loadDataOnSessionAndAuditReaderAsync()).ConfigureAwait(false);
			await (checkEntitiesAsync()).ConfigureAwait(false);
			await (checkEntityNamesAsync()).ConfigureAwait(false);
		}
	}
}