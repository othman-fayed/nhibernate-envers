//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.ManyToOne.BiDirectional
{
	using System.Threading.Tasks;
	public partial class ImplicitMappedByTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionsCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (OneToManyOwned), ownedId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2);
			(await (AuditReader().GetRevisionsAsync(typeof(ManyToOneOwning), owning1Id)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2);
			(await (AuditReader().GetRevisionsAsync(typeof(ManyToOneOwning), owning2Id)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 3);
		}

		[Test]
		public async Task VerifyHistoryOfOwnedAsync()
		{
			var owned = new OneToManyOwned {Data = "data", Id = ownedId};
			var owning1 = new ManyToOneOwning {Data = "data1", References = owned, Id = owning1Id};
			var owning2 = new ManyToOneOwning {Data = "data2", References = owned, Id = owning2Id};

			var ver1 = await (AuditReader().FindAsync<OneToManyOwned>(ownedId, 1)).ConfigureAwait(false);
			ver1.Should().Be.EqualTo(owned);
			ver1.Referencing.Should().Have.SameValuesAs(owning1, owning2);

			var ver2 = await (AuditReader().FindAsync<OneToManyOwned>(ownedId, 2)).ConfigureAwait(false);
			ver2.Should().Be.EqualTo(owned);
			ver2.Referencing.Should().Have.SameValuesAs(owning2);
		}

		[Test]
		public async Task VerifyHistoryOfOwning1Async()
		{
			var ver1 = new ManyToOneOwning {Data = "data1", Id = owning1Id};
			(await (AuditReader().FindAsync<ManyToOneOwning>(owning1Id, 1)).ConfigureAwait(false))
				.Should().Be.EqualTo(ver1);
		}

		[Test]
		public async Task VerifyHistoryOfOwning2Async()
		{
			var owned = new OneToManyOwned {Data = "data", Id = ownedId};
			var owning1 = new ManyToOneOwning {Data = "data2", Id = owning2Id, References = owned};
			var owning3 = new ManyToOneOwning {Data = "data2modified", Id = owning2Id, References = owned};

			var ver1 = await (AuditReader().FindAsync<ManyToOneOwning>(owning2Id, 1)).ConfigureAwait(false);
			var ver3 = await (AuditReader().FindAsync<ManyToOneOwning>(owning2Id, 3)).ConfigureAwait(false);

			ver1.Should().Be.EqualTo(owning1);
			ver1.References.Id.Should().Be.EqualTo(owned.Id);
			ver3.Should().Be.EqualTo(owning3);
			ver3.References.Id.Should().Be.EqualTo(owned.Id);
		}
	}
}