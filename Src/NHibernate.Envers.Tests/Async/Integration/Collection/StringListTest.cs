//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.Collection;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Collection
{
	using System.Threading.Tasks;
	public partial class StringListTest : TestBase
	{


		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(StringListEntity), sle1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(StringListEntity), sle2_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOf1Async()
		{
			var rev1 = await (AuditReader().FindAsync<StringListEntity>(sle1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<StringListEntity>(sle1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<StringListEntity>(sle1_id, 3)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Strings);
			CollectionAssert.AreEqual(new[] { "sle1_string1", "sle1_string2" }, rev2.Strings);
			CollectionAssert.AreEqual(new[] { "sle1_string3", "sle1_string2" }, rev3.Strings);
		}

		[Test]
		public async Task VerifyHistoryOf2Async()
		{
			var rev1 = await (AuditReader().FindAsync<StringListEntity>(sle2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<StringListEntity>(sle2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<StringListEntity>(sle2_id, 3)).ConfigureAwait(false);

			CollectionAssert.AreEqual(new[] { "sle2_string1", "sle2_string2" }, rev1.Strings);
			CollectionAssert.AreEqual(new[] { "sle2_string1", "sle2_string2", "sle2_string1" }, rev2.Strings);
			CollectionAssert.AreEqual(new[] { "sle2_string2", "sle2_string1" }, rev3.Strings);
		}
	}
}