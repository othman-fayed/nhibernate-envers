//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Collection.MapKey
{
	using System.Threading.Tasks;
	public partial class IdMapKeyTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(IdMapKeyEntity), imke_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfImkeAsync()
		{
			var ste1 = await (Session.GetAsync<StrTestEntity>(ste1_id)).ConfigureAwait(false);
			var ste2 = await (Session.GetAsync<StrTestEntity>(ste2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<IdMapKeyEntity>(imke_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<IdMapKeyEntity>(imke_id, 2)).ConfigureAwait(false);

			Assert.AreEqual(new Dictionary<int, StrTestEntity> { { ste1.Id, ste1 } }, rev1.IdMap);
			Assert.AreEqual(new Dictionary<int, StrTestEntity> { { ste1.Id, ste1 }, { ste2.Id, ste2 } }, rev2.IdMap);
		}
	}
}