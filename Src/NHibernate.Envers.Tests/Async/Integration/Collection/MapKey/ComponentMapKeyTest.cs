//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.Components;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Collection.MapKey
{
	using System.Threading.Tasks;
	public partial class ComponentMapKeyTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(ComponentMapKeyEntity), cmke_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfImkeAsync()
		{
			var cte1 = await (Session.GetAsync<ComponentTestEntity>(cte1_id)).ConfigureAwait(false);
			var cte2 = await (Session.GetAsync<ComponentTestEntity>(cte2_id)).ConfigureAwait(false);

			// These fields are unversioned.
			cte1.Comp2 = null;
			cte2.Comp2 = null;

			var rev1 = await (AuditReader().FindAsync<ComponentMapKeyEntity>(cmke_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ComponentMapKeyEntity>(cmke_id, 2)).ConfigureAwait(false);

			Assert.AreEqual(new Dictionary<Component1, ComponentTestEntity> { { cte1.Comp1, cte1 } }, rev1.IdMap);
			Assert.AreEqual(new Dictionary<Component1, ComponentTestEntity> { { cte1.Comp1, cte1 }, { cte2.Comp1, cte2 } }, rev2.IdMap);
		}
	}
}