//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.Collection;
using NHibernate.Envers.Tests.Entities.Components;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Collection.Embeddable
{
	using System.Threading.Tasks;
	public partial class EmbeddableSetTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (EmbeddableSetEntity), ese1Id)).ConfigureAwait(false))
			             .Should().Have.SameSequenceAs(1, 2, 3, 4, 5, 6, 7);
		}

		[Test]
		public async Task VerifyHistoryOfEse1Async()
		{
			var rev1 = await (AuditReader().FindAsync<EmbeddableSetEntity>(ese1Id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<EmbeddableSetEntity>(ese1Id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<EmbeddableSetEntity>(ese1Id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<EmbeddableSetEntity>(ese1Id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<EmbeddableSetEntity>(ese1Id, 5)).ConfigureAwait(false);
			var rev6 = await (AuditReader().FindAsync<EmbeddableSetEntity>(ese1Id, 6)).ConfigureAwait(false);
			var rev7 = await (AuditReader().FindAsync<EmbeddableSetEntity>(ese1Id, 7)).ConfigureAwait(false);

			rev1.ComponentSet.Should().Have.SameValuesAs(c3_1, c3_3);
			rev2.ComponentSet.Should().Have.SameValuesAs(c3_1, c3_2, c3_3);
			rev3.ComponentSet.Should().Have.SameValuesAs(c3_1, c3_3);
			rev4.ComponentSet.Should().Have.SameValuesAs(c3_1, c3_2, c3_3, c3_4);
			rev5.ComponentSet.Should().Have.SameValuesAs(c3_1, c3_3);
			rev6.ComponentSet.Should().Have.SameValuesAs(c3_2, c3_4);
			rev7.ComponentSet.Should().Have.SameValuesAs(c3_2, c3_4, c3_1);
		}
	}
}