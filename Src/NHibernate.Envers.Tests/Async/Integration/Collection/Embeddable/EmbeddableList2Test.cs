//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.Collection;
using NHibernate.Envers.Tests.Entities.Components.Relations;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Collection.Embeddable
{
	using System.Threading.Tasks;
	public partial class EmbeddableList2Test : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (EmbeddableListEntity2), eleId1)).ConfigureAwait(false)).Should().Have.SameSequenceAs(1, 2, 3, 4, 5, 7, 8);
			(await (AuditReader().GetRevisionsAsync(typeof (StrTestNoProxyEntity), entity1.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(1);
			(await (AuditReader().GetRevisionsAsync(typeof (StrTestNoProxyEntity), entity2.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(1);
			(await (AuditReader().GetRevisionsAsync(typeof (StrTestNoProxyEntity), entity3.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(4);
			(await (AuditReader().GetRevisionsAsync(typeof (StrTestNoProxyEntity), entity4.Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(5, 6);
		}

		[Test]
		public async Task VerifyManyToOneComponentListAsync()
		{
			// Revision 1: many-to-one component1 in the list
			var rev1 = await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 1)).ConfigureAwait(false);
			rev1.Should().Not.Be.Null();
			rev1.ComponentList.Should().Not.Be.Empty();
			rev1.ComponentList[0].Data.Should().Be.EqualTo("dataComponent1");
			rev1.ComponentList[0].Entity.Should().Be.EqualTo(entity1);
		}

		[Test]
		public async Task VerifyHistoryOfEle1Async()
		{
			// Revision 1: many-to-one component in the list
			(await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 1)).ConfigureAwait(false)).ComponentList
										.Should().Have.SameSequenceAs(new ManyToOneEagerComponent {Data = "dataComponent1", Entity = entity1});

			// Revision 2: many-to-one component in the list
			(await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 2)).ConfigureAwait(false)).ComponentList
										.Should().Have.SameSequenceAs(new ManyToOneEagerComponent { Data = "dataComponent2", Entity = entity2 });

			// Revision 3: two many-to-one components in the list
			(await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 3)).ConfigureAwait(false)).ComponentList
										.Should().Have.SameSequenceAs(new ManyToOneEagerComponent { Data = "dataComponent2", Entity = entity2 },
																									new ManyToOneEagerComponent{Data="dataComponent1", Entity = entity1});

			// Revision 4: second component edited and first one in the list
			(await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 4)).ConfigureAwait(false)).ComponentList
										.Should().Have.SameSequenceAs(new ManyToOneEagerComponent { Data = "dataComponent3", Entity = entity3 },
																									new ManyToOneEagerComponent { Data = "dataComponent1", Entity = entity1 });

			// Revision 5: fourth component added in the list
			(await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 5)).ConfigureAwait(false)).ComponentList
									.Should().Have.SameSequenceAs(new ManyToOneEagerComponent { Data = "dataComponent3", Entity = entity3 },
																						new ManyToOneEagerComponent { Data = "dataComponent1", Entity = entity1 },
																						new ManyToOneEagerComponent { Data = "dataComponent4", Entity = entity4Copy });

			// Revision 6: changing fourth component property
			(await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 6)).ConfigureAwait(false)).ComponentList
									.Should().Have.SameSequenceAs(new ManyToOneEagerComponent { Data = "dataComponent3", Entity = entity3 },
																			new ManyToOneEagerComponent { Data = "dataComponent1", Entity = entity1 },
																			new ManyToOneEagerComponent { Data = "dataComponent4", Entity = entity4 });

			// Revision 7: removing component number four
			(await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 7)).ConfigureAwait(false)).ComponentList
									.Should().Have.SameSequenceAs(new ManyToOneEagerComponent { Data = "dataComponent3", Entity = entity3 },
																								new ManyToOneEagerComponent { Data = "dataComponent1", Entity = entity1 });

			(await (AuditReader().FindAsync<EmbeddableListEntity2>(eleId1, 8)).ConfigureAwait(false)).Should().Be.Null();
		}
	}
}