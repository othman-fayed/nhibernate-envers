//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.Collection;
using NHibernate.Envers.Tests.Entities.ManyToMany;
using NHibernate.Envers.Tests.Entities.ManyToMany.UniDirectional;
using NHibernate.Envers.Tests.Entities.OneToMany;
using NHibernate.Envers.Tests.Integration.ManyToMany.Ternary;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Proxy
{
	using System.Threading.Tasks;
	public partial class RemovedObjectQueryTest : TestBase
	{

		[Test]
		public async Task VerifyTernaryMapAsync()
		{
			var ternaryMap = new TernaryMapEntity { Id = ternaryMapId };
			ternaryMap.Map[intEntity1] = stringEntity1;
			ternaryMap.Map[new IntTestPrivSeqEntity { Id = intEntity2.Id, Number = 2 }] = new StrTestPrivSeqEntity
				{
					Id = stringEntity2.Id,
					Str = "value 2"
				};

			var entity = await (AuditReader().FindAsync<TernaryMapEntity>(ternaryMapId, 15)).ConfigureAwait(false);
			entity.Map.Should().Have.SameValuesAs(ternaryMap.Map);

			ternaryMap.Map.Clear();
			ternaryMap.Map.Add(intEntity1, stringEntity1);
			ternaryMap.Map.Add(intEntity2, stringEntity2);

			entity = await (AuditReader().FindAsync<TernaryMapEntity>(ternaryMapId, 16)).ConfigureAwait(false);
			entity.Map.Should().Have.SameValuesAs(ternaryMap.Map);

			var res = (await (AuditReader().CreateQuery().ForHistoryOf<TernaryMapEntity, DefaultRevisionEntity>(true)
														 .Add(AuditEntity.Id().Eq(ternaryMapId))
														 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
														 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(17);
			res.Entity.Map.Should().Have.SameValuesAs(ternaryMap.Map);
		}

		[Test]
		public async Task VerifyOneToManyCollectionSemanticsAsync()
		{
			var edVer1 = new CollectionRefEdEntity {Id = 1, Data = "data_ed_1"};
			var ingVer1 = new CollectionRefIngEntity {Id = 2, Data = "data_ing_1"};
			var ingVer2 = new CollectionRefIngEntity {Id = 2, Data = "modified data_ing_1"};

			var entity = await (AuditReader().FindAsync<CollectionRefEdEntity>(1, 18)).ConfigureAwait(false);
			entity.Should().Be.EqualTo(edVer1);
			entity.Reffering.Should().Have.SameValuesAs(ingVer1);

			entity = await (AuditReader().FindAsync<CollectionRefEdEntity>(1, 19)).ConfigureAwait(false);
			entity.Reffering.Should().Have.SameValuesAs(ingVer2);

			var res = (await (AuditReader().CreateQuery().ForHistoryOf<CollectionRefEdEntity, DefaultRevisionEntity>(true)
			                       .Add(AuditEntity.Id().Eq(1))
			                       .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
			                       .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(20);
			res.Entity.Data.Should().Be.EqualTo("data_ed_1");
			res.Entity.Reffering.Should().Have.SameValuesAs(ingVer2);
		}

		[Test]
		public async Task VerifyManyToManyCollectionSemanticsAsync()
		{
			var edVer1 = new ListOwnedEntity { Id = 1, Data = "data_ed_1" };
			var ingVer1 = new ListOwningEntity { Id = 2, Data = "data_ing_1" };
			var ingVer2 = new ListOwningEntity { Id = 2, Data = "modified data_ing_1" };

			var entity = await (AuditReader().FindAsync<ListOwnedEntity>(1, 21)).ConfigureAwait(false);
			entity.Should().Be.EqualTo(edVer1);
			entity.Referencing.Should().Have.SameValuesAs(ingVer1);

			entity = await (AuditReader().FindAsync<ListOwnedEntity>(1, 22)).ConfigureAwait(false);
			entity.Referencing.Should().Have.SameValuesAs(ingVer2);

			var res = (await (AuditReader().CreateQuery().ForHistoryOf<ListOwnedEntity, DefaultRevisionEntity>(true)
														 .Add(AuditEntity.Id().Eq(1))
														 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
														 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(23);
			res.Entity.Data.Should().Be.EqualTo("data_ed_1");
			res.Entity.Referencing.Should().Have.SameValuesAs(ingVer2);
		}

		[Test]
		public async Task VerifyUnversionedRelationAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<M2MIndexedListTargetNotAuditedEntity, DefaultRevisionEntity>()
														 .Add(AuditEntity.Id().Eq(1))
														 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
														 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(14);
			res.Entity.References
				 .Should().Have.SameSequenceAs(unversionedEntity1, unversionedEntity2);
		}

		[Test]
		public async Task VerifyElementCollectionAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<StringSetEntity, DefaultRevisionEntity>()
											 .Add(AuditEntity.Id().Eq(stringSetId))
											 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
											 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(12);
			res.Entity.Strings
				 .Should().Have.SameValuesAs("string 1", "string 2");
		}

		[Test]
		public async Task VerifyReferencedOneToManySameRevisionAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<SetRefIngEntity, DefaultRevisionEntity>()
								 .Add(AuditEntity.Id().Eq(2))
								 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
								 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(2);
			res.Entity.Data.Should().Be.EqualTo("Example Data 1");
			res.Entity.Reference.Data.Should().Be.EqualTo("Demo Data 1");
		}

		[Test]
		public async Task VerifyReferringOneToManySameRevisionAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<SetRefEdEntity, DefaultRevisionEntity>()
					 .Add(AuditEntity.Id().Eq(1))
					 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
					 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(2);
			res.Entity.Data.Should().Be.EqualTo("Demo Data 1");
			res.Entity.Reffering.Should().Have.SameValuesAs(new SetRefIngEntity { Id = 2, Data = "Example Data 1" });
		}

		[Test]
		public async Task VerifyReferencedOneToManyDifferentRevisionsAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<SetRefIngEntity, DefaultRevisionEntity>()
					 .Add(AuditEntity.Id().Eq(4))
					 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
					 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(4);
			res.Entity.Data.Should().Be.EqualTo("Example Data 2");
			res.Entity.Reference.Data.Should().Be.EqualTo("Demo Data 2");
		}

		[Test]
		public async Task VerifyReferringOneToManyDifferentRevisionAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<SetRefEdEntity, DefaultRevisionEntity>()
					 .Add(AuditEntity.Id().Eq(3))
					 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
					 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(5);
			res.Entity.Data.Should().Be.EqualTo("Demo Data 2");
			res.Entity.Reffering.Should().Be.Empty();

			//after commit in revision 4, child entity has been removed
			res = (await (AuditReader().CreateQuery().ForHistoryOf<SetRefEdEntity, DefaultRevisionEntity>()
												 .Add(AuditEntity.Id().Eq(3))
												 .Add(AuditEntity.RevisionNumber().Eq(4))
												 .ResultsAsync()).ConfigureAwait(false)).First();
			res.Entity.Data.Should().Be.EqualTo("Demo Data 2");
			res.Entity.Reffering.Should().Be.Empty();
		}

		[Test]
		public async Task VerifyOwnedManyToManySameRevisionAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<SetOwningEntity, DefaultRevisionEntity>()
														 .Add(AuditEntity.Id().Eq(5))
														 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
														 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(7);
			res.Entity.Data.Should().Be.EqualTo("Demo Data 1");
			res.Entity.References.Should().Have.SameValuesAs(new SetOwnedEntity { Id = 6, Data = "Example Data 1" });
		}

		[Test]
		public async Task VerifyOwningManyToManySameRevisionAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<SetOwnedEntity, DefaultRevisionEntity>()
														 .Add(AuditEntity.Id().Eq(6))
														 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
														 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(7);
			res.Entity.Data.Should().Be.EqualTo("Example Data 1");
			res.Entity.Referencing.Should().Have.SameValuesAs(new SetOwningEntity { Id = 5, Data = "Demo Data 1" });
		}

		[Test]
		public async Task VerifyOwnedManyToManyDifferentRevisionsAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<SetOwningEntity, DefaultRevisionEntity>()
											 .Add(AuditEntity.Id().Eq(7))
											 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
											 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(9);
			res.Entity.Data.Should().Be.EqualTo("Demo Data 2");
			res.Entity.References.Should().Have.SameValuesAs(new SetOwnedEntity { Id = 8, Data = "Example Data 2" });
		}

		[Test]
		public async Task VerifyOwningManyToManyDifferentRevisionsAsync()
		{
			var res = (await (AuditReader().CreateQuery().ForHistoryOf<SetOwnedEntity, DefaultRevisionEntity>()
											 .Add(AuditEntity.Id().Eq(8))
											 .Add(AuditEntity.RevisionType().Eq(RevisionType.Deleted))
											 .ResultsAsync()).ConfigureAwait(false)).First();
			res.RevisionEntity.Id.Should().Be.EqualTo(10);
			res.Entity.Data.Should().Be.EqualTo("Example Data 2");
			res.Entity.Referencing.Should().Be.Empty();

			//after commit in revision 9, related entity has been removed
			res = (await (AuditReader().CreateQuery().ForHistoryOf<SetOwnedEntity, DefaultRevisionEntity>()
														 .Add(AuditEntity.Id().Eq(8))
														 .Add(AuditEntity.RevisionNumber().Eq(9))
														 .ResultsAsync()).ConfigureAwait(false)).First();
			res.Entity.Data.Should().Be.EqualTo("Example Data 2");
			res.Entity.Referencing.Should().Be.Empty();
		}
	}
}