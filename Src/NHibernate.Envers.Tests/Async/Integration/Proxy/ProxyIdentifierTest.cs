//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.ManyToMany.UniDirectional;
using NHibernate.Envers.Tests.Entities.ManyToOne.UniDirectional;
using NHibernate.Envers.Tests.Entities.OneToMany;
using NHibernate.Proxy;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Proxy
{
	using System.Threading.Tasks;
	public partial class ProxyIdentifierTest : TestBase
	{

		[Test]
		public async Task VerifyProxyIdentifierAsync()
		{
			var rev1 = await (AuditReader().FindAsync<TargetNotAuditedEntity>(tnae1.Id, 1)).ConfigureAwait(false);
			var proxyCreatedByEnvers = rev1.Reference as INHibernateProxy;

			Assert.IsNotNull(proxyCreatedByEnvers);

			var lazyInitializer = proxyCreatedByEnvers.HibernateLazyInitializer;
			Assert.IsTrue(lazyInitializer.IsUninitialized);
			Assert.AreEqual(tnae1.Id, lazyInitializer.Identifier);
			Assert.IsTrue(lazyInitializer.IsUninitialized);

			Assert.AreEqual(uste1.Id, rev1.Reference.Id);
			Assert.AreEqual(uste1.Str, rev1.Reference.Str);
			Assert.IsFalse(lazyInitializer.IsUninitialized);
		}

		[Test]
		public async Task VerifyNullReferenceWithNotFoundActionIgnoreAsync()
		{
			var mtoRev2 = await (AuditReader().FindAsync<ManyToOneNotAuditedNullEntity>(mtonane1.Id, 2)).ConfigureAwait(false);
			mtoRev2.Should().Be.EqualTo(mtonane1);
			mtoRev2.Reference.Should().Be.Null();

			var mtmRev2 = await (AuditReader().FindAsync<ManyToManyNotAuditedNullEntity>(mtmnane1.Id, 2)).ConfigureAwait(false);
			mtmRev2.Should().Be.EqualTo(mtmnane1);
			mtmRev2.References.Should().Be.Empty();

			var otmRev2 = await (AuditReader().FindAsync<OneToManyNotAuditedNullEntity>(otmnane1.Id, 2)).ConfigureAwait(false);
			otmRev2.Should().Be.EqualTo(otmnane1);
			otmRev2.References.Should().Be.Empty();
		}
	}
}