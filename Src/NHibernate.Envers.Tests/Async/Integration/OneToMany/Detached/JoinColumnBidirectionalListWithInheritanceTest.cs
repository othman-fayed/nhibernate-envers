//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.OneToMany.Detached;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.OneToMany.Detached
{
	using System.Threading.Tasks;
	public partial class JoinColumnBidirectionalListWithInheritanceTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(ListJoinColumnBidirectionalInheritanceRefIngEntity), ing1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(ListJoinColumnBidirectionalInheritanceRefIngEntity), ing2_id)).ConfigureAwait(false));

			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(ListJoinColumnBidirectionalInheritanceRefEdParentEntity), ed1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(ListJoinColumnBidirectionalInheritanceRefEdParentEntity), ed2_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfIng1Async()
		{
			var ed1 = await (Session.GetAsync<ListJoinColumnBidirectionalInheritanceRefEdParentEntity>(ed1_id)).ConfigureAwait(false);
			var ed2 = await (Session.GetAsync<ListJoinColumnBidirectionalInheritanceRefEdParentEntity>(ed2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListJoinColumnBidirectionalInheritanceRefIngEntity>(ing1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListJoinColumnBidirectionalInheritanceRefIngEntity>(ing1_id, 2)).ConfigureAwait(false);

			CollectionAssert.AreEqual(new[] { ed1 }, rev1.References);
			CollectionAssert.AreEqual(new[] { ed1, ed2 }, rev2.References);
		}

		[Test]
		public async Task VerifyHistoryOfIng2Async()
		{
			var ed2 = await (Session.GetAsync<ListJoinColumnBidirectionalInheritanceRefEdParentEntity>(ed2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListJoinColumnBidirectionalInheritanceRefIngEntity>(ing2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListJoinColumnBidirectionalInheritanceRefIngEntity>(ing2_id, 2)).ConfigureAwait(false);

			CollectionAssert.AreEqual(new[] { ed2 }, rev1.References);
			CollectionAssert.IsEmpty(rev2.References);
		}

		[Test]
		public async Task VerifyHistoryOfEd1Async()
		{
			var ing1 = await (Session.GetAsync<ListJoinColumnBidirectionalInheritanceRefIngEntity>(ing1_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListJoinColumnBidirectionalInheritanceRefEdParentEntity>(ed1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListJoinColumnBidirectionalInheritanceRefEdParentEntity>(ed1_id, 2)).ConfigureAwait(false);

			Assert.AreEqual(ing1, rev1.Owner);
			Assert.AreEqual(ing1, rev2.Owner);
		}

		[Test]
		public async Task VerifyHistoryOfEd2Async()
		{
			var ing1 = await (Session.GetAsync<ListJoinColumnBidirectionalInheritanceRefIngEntity>(ing1_id)).ConfigureAwait(false);
			var ing2 = await (Session.GetAsync<ListJoinColumnBidirectionalInheritanceRefIngEntity>(ing2_id)).ConfigureAwait(false);

			var rev1 = await (AuditReader().FindAsync<ListJoinColumnBidirectionalInheritanceRefEdParentEntity>(ed2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<ListJoinColumnBidirectionalInheritanceRefEdParentEntity>(ed2_id, 2)).ConfigureAwait(false);

			Assert.AreEqual(ing2, rev1.Owner);
			Assert.AreEqual(ing1, rev2.Owner);
		}
	}
}