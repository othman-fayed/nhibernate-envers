//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.OneToMany.Detached;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.OneToMany.Detached
{
	using System.Threading.Tasks;
	public partial class DoubleJoinColumnBidirectionalListTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 4 }, await (AuditReader().GetRevisionsAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 4 }, await (AuditReader().GetRevisionsAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 3, 4 }, await (AuditReader().GetRevisionsAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity1), ed1_1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 4 }, await (AuditReader().GetRevisionsAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity1), ed1_2_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 4 }, await (AuditReader().GetRevisionsAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity2), ed2_1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity2), ed2_2_id)).ConfigureAwait(false));
		}


		[Test]
		public async Task VerifyHistoryOfIng1Async()
		{
			var ed1_1_fromRev1 = new DoubleListJoinColumnBidirectionalRefEdEntity1 {Id = ed1_1_id, Data = "ed1_1"};
			var ed1_1_fromRev3 = new DoubleListJoinColumnBidirectionalRefEdEntity1{Id = ed1_1_id, Data = "ed1_1 bis"};
			var ed1_2 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_2_id)).ConfigureAwait(false);
			var ed2_1 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_1_id)).ConfigureAwait(false);
			var ed2_2_fromRev1 = new DoubleListJoinColumnBidirectionalRefEdEntity2 {Id = ed2_2_id, Data = "ed2_2"};
			var ed2_2_fromRev3 = new DoubleListJoinColumnBidirectionalRefEdEntity2{Id = ed2_2_id, Data = "ed2_2 bis"};

			var rev1 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing1_id, 4)).ConfigureAwait(false);

			CollectionAssert.AreEquivalent(new[] { ed1_1_fromRev1 }, rev1.References1);
			CollectionAssert.AreEquivalent(new[] { ed1_1_fromRev1, ed1_2 }, rev2.References1);
			CollectionAssert.AreEquivalent(new[] { ed1_1_fromRev3, ed1_2 }, rev3.References1);
			CollectionAssert.IsEmpty(rev4.References1);

			CollectionAssert.AreEquivalent(new[] { ed2_1 }, rev1.References2);
			CollectionAssert.AreEquivalent(new[] { ed2_1, ed2_2_fromRev1 }, rev2.References2);
			CollectionAssert.AreEquivalent(new[] { ed2_1, ed2_2_fromRev3 }, rev3.References2);
			CollectionAssert.AreEquivalent(new[] { ed2_2_fromRev3 }, rev4.References2);
		}

		[Test]
		public async Task VerifyHistoryOfIng2Async()
		{
			var ed1_1_fromRev3 = new DoubleListJoinColumnBidirectionalRefEdEntity1 { Id = ed1_1_id, Data = "ed1_1 bis" };
			var ed1_2 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_2_id)).ConfigureAwait(false);
			var ed2_1 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_1_id)).ConfigureAwait(false);
			var ed2_2_fromRev1 = new DoubleListJoinColumnBidirectionalRefEdEntity2 { Id = ed2_2_id, Data = "ed2_2" };
		
			var rev1 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing2_id, 4)).ConfigureAwait(false);

			CollectionAssert.AreEquivalent(new[] { ed1_2 }, rev1.References1);
			CollectionAssert.IsEmpty(rev2.References1);
			CollectionAssert.IsEmpty(rev3.References1);
			CollectionAssert.AreEquivalent(new[] { ed1_1_fromRev3, ed1_2 }, rev4.References1);

			CollectionAssert.AreEquivalent(new[] { ed2_2_fromRev1 }, rev1.References2);
			CollectionAssert.IsEmpty(rev2.References2);
			CollectionAssert.IsEmpty(rev3.References2);
			CollectionAssert.AreEquivalent(new[] { ed2_1 }, rev4.References2);
		}

		[Test]
		public async Task VerifyHistoryOfEd1_1Async()
		{
			var ing1 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing1_id)).ConfigureAwait(false);
			var ing2 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing2_id)).ConfigureAwait(false);


			var rev1 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_1_id, 4)).ConfigureAwait(false);

			Assert.AreEqual(ing1, rev1.Owner);
			Assert.AreEqual(ing1, rev2.Owner);
			Assert.AreEqual(ing1, rev3.Owner);
			Assert.AreEqual(ing2, rev4.Owner);

			Assert.AreEqual("ed1_1", rev1.Data);
			Assert.AreEqual("ed1_1", rev2.Data);
			Assert.AreEqual("ed1_1 bis", rev3.Data);
			Assert.AreEqual("ed1_1 bis", rev4.Data);
		}

		[Test]
		public async Task VerifyHistoryOfEd1_2Async()
		{
			var ing1 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing1_id)).ConfigureAwait(false);
			var ing2 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing2_id)).ConfigureAwait(false);


			var rev1 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity1>(ed1_2_id, 4)).ConfigureAwait(false);

			Assert.AreEqual(ing2, rev1.Owner);
			Assert.AreEqual(ing1, rev2.Owner);
			Assert.AreEqual(ing1, rev3.Owner);
			Assert.AreEqual(ing2, rev4.Owner);

			Assert.AreEqual("ed1_2", rev1.Data);
			Assert.AreEqual("ed1_2", rev2.Data);
			Assert.AreEqual("ed1_2", rev3.Data);
			Assert.AreEqual("ed1_2", rev4.Data);
		}

		[Test]
		public async Task VerifyHistoryOfEd2_1Async()
		{
			var ing1 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing1_id)).ConfigureAwait(false);
			var ing2 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing2_id)).ConfigureAwait(false);


			var rev1 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_1_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_1_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_1_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_1_id, 4)).ConfigureAwait(false);

			Assert.AreEqual(ing1, rev1.Owner);
			Assert.AreEqual(ing1, rev2.Owner);
			Assert.AreEqual(ing1, rev3.Owner);
			Assert.AreEqual(ing2, rev4.Owner);

			Assert.AreEqual("ed2_1", rev1.Data);
			Assert.AreEqual("ed2_1", rev2.Data);
			Assert.AreEqual("ed2_1", rev3.Data);
			Assert.AreEqual("ed2_1", rev4.Data);
		}

		[Test]
		public async Task VerifyHistoryOfEd2_2Async()
		{
			var ing1 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing1_id)).ConfigureAwait(false);
			var ing2 = await (Session.GetAsync<DoubleListJoinColumnBidirectionalRefIngEntity>(ing2_id)).ConfigureAwait(false);


			var rev1 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_2_id, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_2_id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_2_id, 3)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<DoubleListJoinColumnBidirectionalRefEdEntity2>(ed2_2_id, 4)).ConfigureAwait(false);

			Assert.AreEqual(ing2, rev1.Owner);
			Assert.AreEqual(ing1, rev2.Owner);
			Assert.AreEqual(ing1, rev3.Owner);
			Assert.AreEqual(ing1, rev4.Owner);

			Assert.AreEqual("ed2_2", rev1.Data);
			Assert.AreEqual("ed2_2", rev2.Data);
			Assert.AreEqual("ed2_2 bis", rev3.Data);
			Assert.AreEqual("ed2_2 bis", rev4.Data);
		}
	}
}