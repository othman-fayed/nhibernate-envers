//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.OneToMany;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.OneToMany
{
	using System.Threading.Tasks;
	public partial class InverseSideChangesTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(SetRefEdEntity), ed1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 2 }, await (AuditReader().GetRevisionsAsync(typeof(SetRefIngEntity), ing1_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfEd1Async()
		{
			var rev1 = await (AuditReader().FindAsync<SetRefEdEntity>(ed1_id, 1)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev1.Reffering);
		}

		[Test]
		public async Task VerifyHistoryOfIng1Async()
		{
			var rev2 = await (AuditReader().FindAsync<SetRefIngEntity>(ing1_id, 2)).ConfigureAwait(false);

			Assert.IsNull(rev2.Reference);
		}
	}
}