//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Basic
{
	using System.Threading.Tasks;
	public partial class TransactionRollbackBehaviourTest : TestBase
	{

		[Test]
		public async Task CommittedEntityShouldHaveAuditRecordAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof(IntTestEntity), committedId)).ConfigureAwait(false)).Count().Should().Be.EqualTo(1);
		}

		[Test]
		public async Task RollbackedEntityShouldHaveAuditRecordIfPersistedAsync()
		{
			//NH might persist rollbacked entity
			//https://nhibernate.jira.com/browse/NH-3304
			var revisions = await (AuditReader().GetRevisionsAsync(typeof (IntTestEntity), rollbackId)).ConfigureAwait(false);
			var entity = await (Session.GetAsync<IntTestEntity>(rollbackId)).ConfigureAwait(false);
			if (entity == null)
			{
				revisions.Should().Be.Empty();
			}
			else
			{
				//if code generated poid, the session is still dirty when second transaction starts
				// eg oracle dialects ends up here in this test
				revisions.Count().Should().Be.EqualTo(1);
			}
		}
	}
}