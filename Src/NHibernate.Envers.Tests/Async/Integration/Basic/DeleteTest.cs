//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Basic
{
	using System.Threading.Tasks;
	public partial class DeleteTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync() 
		{
			CollectionAssert.AreEquivalent(new[] {1, 2, 4}, await (AuditReader().GetRevisionsAsync(typeof(BasicTestEntity2),id1)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] {1, 3}, await (AuditReader().GetRevisionsAsync(typeof(BasicTestEntity2),id2)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] {1, 2}, await (AuditReader().GetRevisionsAsync(typeof(BasicTestEntity2),id3)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOf1Async()
		{
			var ver1 = new BasicTestEntity2 {Id = id1, Str1 = "x"};
			var ver2 = new BasicTestEntity2 {Id = id1, Str1 = "x2"};
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<BasicTestEntity2>(id1, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<BasicTestEntity2>(id1, 2)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<BasicTestEntity2>(id1, 3)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<BasicTestEntity2>(id1, 4)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOf2Async()
		{
			var ver1 = new BasicTestEntity2 { Id = id2, Str1 = "y" };
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<BasicTestEntity2>(id2, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<BasicTestEntity2>(id2, 2)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<BasicTestEntity2>(id2, 3)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<BasicTestEntity2>(id2, 4)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOf3Async()
		{
			var ver1 = new BasicTestEntity2 { Id = id3, Str1 = "z" };
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<BasicTestEntity2>(id3, 1)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<BasicTestEntity2>(id3, 2)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<BasicTestEntity2>(id3, 3)).ConfigureAwait(false));
			Assert.IsNull(await (AuditReader().FindAsync<BasicTestEntity2>(id3, 4)).ConfigureAwait(false));
		}
	}
}