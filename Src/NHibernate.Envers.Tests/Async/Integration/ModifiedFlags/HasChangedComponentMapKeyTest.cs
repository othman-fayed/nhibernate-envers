//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.Components;
using NHibernate.Envers.Tests.Integration.Collection.MapKey;
using NHibernate.Envers.Tests.Tools;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.ModifiedFlags
{
	using System.Threading.Tasks;
	public partial class HasChangedComponentMapKeyTest : AbstractModifiedFlagsEntityTest
	{

		[Test]
		public async Task VerifyHasChangedMapEntityAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(ComponentMapKeyEntity), cmke_id, "IdMap")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision().Should().Have.SameSequenceAs(1, 2);
			(await (QueryForPropertyHasNotChangedAsync(typeof(ComponentMapKeyEntity), cmke_id, "IdMap")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision().Should().Be.Empty();
		}

		[Test]
		public async Task VerifyHasChangedComponentEntityAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(ComponentTestEntity), cte1_id, "Comp1")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision().Should().Have.SameSequenceAs(1);
			(await (QueryForPropertyHasNotChangedAsync(typeof (ComponentTestEntity), cte1_id, "Comp1")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision().Should().Be.Empty();
			(await (QueryForPropertyHasChangedAsync(typeof(ComponentTestEntity), cte2_id, "Comp1")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision().Should().Have.SameSequenceAs(1);
			(await (QueryForPropertyHasNotChangedAsync(typeof(ComponentTestEntity), cte2_id, "Comp1")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision().Should().Be.Empty();
		}
	}
}