//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities.OneToMany.Detached;
using NHibernate.Envers.Tests.Tools;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.ModifiedFlags
{
	using System.Threading.Tasks;
	public partial class HasChangedDoubleJoinColumnBidirectionalListTest : AbstractModifiedFlagsEntityTest
	{

		[Test]
		public async Task VerifyOwnerHasChangedAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof (DoubleListJoinColumnBidirectionalRefEdEntity1), ed1_1_id, "Owner")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(1, 4);
			(await (QueryForPropertyHasNotChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity1), ed1_1_id, "Owner")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(3);
			(await (QueryForPropertyHasChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity1), ed1_2_id, "Owner")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(1, 2, 4);
			(await (QueryForPropertyHasNotChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity1), ed1_2_id, "Owner")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Be.Empty();
		}

		[Test]
		public async Task VerifyOwnerSecEntityHasChangedAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity2), ed2_1_id, "Owner")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(1, 4);
			(await (QueryForPropertyHasNotChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity2), ed2_1_id, "Owner")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Be.Empty();
			(await (QueryForPropertyHasChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity2), ed2_2_id, "Owner")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(1, 2);
			(await (QueryForPropertyHasNotChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefEdEntity2), ed2_2_id, "Owner")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(3);
		}

		[Test]
		public async Task VerifyReferences1HasChangedAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing1_id, "References1")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(1, 2, 4);
			(await (QueryForPropertyHasChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing2_id, "References1")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(1, 2, 4);
			(await (QueryForPropertyHasNotChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing1_id, "References1")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Be.Empty();
			(await (QueryForPropertyHasNotChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing2_id, "References1")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Be.Empty();
		}

		[Test]
		public async Task VerifyReferences2HasChangedAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing1_id, "References2")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(1, 2, 4);
			(await (QueryForPropertyHasChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing2_id, "References2")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(1, 2, 4);
			(await (QueryForPropertyHasNotChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing1_id, "References2")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Be.Empty();
			(await (QueryForPropertyHasNotChangedAsync(typeof(DoubleListJoinColumnBidirectionalRefIngEntity), ing2_id, "References2")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Be.Empty();
		}
	}
}