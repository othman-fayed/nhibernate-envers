//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.Components;
using NHibernate.Envers.Tests.Integration.ModifiedFlags.Entities;
using NHibernate.Envers.Tests.Tools;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.ModifiedFlags
{
	using System.Threading.Tasks;
	public partial class HasChangedForDefaultNotUsingTest : AbstractModifiedFlagsEntityTest
	{

		[Test]
		public async Task VerifyRevisionsCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (PartialModifiedFlagsEntity), entityId)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2, 3, 4, 5, 6, 7, 8, 10, 11);
		}

		[Test]
		public async Task VerifyHasChangedDataAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof (PartialModifiedFlagsEntity), entityId, "Data")).ConfigureAwait(false))
				.ExtractRevisionNumbersFromRevision()
				.Should().Have.SameSequenceAs(2);
		}

		[Test]
		public async Task VerifyHasChangedComp1Async()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "Comp1")).ConfigureAwait(false))
					.ExtractRevisionNumbersFromRevision()
					.Should().Have.SameSequenceAs(3);
		}

		[Test]
		public void VerifyHasChangedComp2Async()
		{
			Assert.ThrowsAsync<QueryException>(() =>
					QueryForPropertyHasChangedAsync(typeof (PartialModifiedFlagsEntity), entityId, "Comp2")
				);
		}

		[Test]
		public async Task VerifyHasChangedReferencingAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "Referencing")).ConfigureAwait(false))
					.ExtractRevisionNumbersFromRevision()
					.Should().Have.SameSequenceAs(5, 6);			
		}

		[Test]
		public void VerifyHasChangedReferencing2Async()
		{
			Assert.ThrowsAsync<QueryException>(() =>
					QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "Referencing2")
				);
		}

		[Test]
		public async Task VerifyHasChangedStringSetAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "StringSet")).ConfigureAwait(false))
					.ExtractRevisionNumbersFromRevision()
					.Should().Have.SameSequenceAs(1, 7, 8);				
		}

		[Test]
		public async Task VerifyHasChangedStringMapAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "StringMap")).ConfigureAwait(false))
					.ExtractRevisionNumbersFromRevision()
					.Should().Have.SameSequenceAs(1, 8);
		}

		[Test]
		public async Task VerifyHasChangedStringSetAndMapAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "StringSet", "StringMap")).ConfigureAwait(false))
					.ExtractRevisionNumbersFromRevision()
					.Should().Have.SameSequenceAs(1, 8);
		}

		[Test]
		public async Task VerifyHasChangedEntitiesSetAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "EntitiesSet")).ConfigureAwait(false))
					.ExtractRevisionNumbersFromRevision()
					.Should().Have.SameSequenceAs(1, 10, 11);			
		}

		[Test]
		public async Task VerifyHasChangedEntitiesMapAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "EntitiesMap")).ConfigureAwait(false))
					.ExtractRevisionNumbersFromRevision()
					.Should().Have.SameSequenceAs(1, 11);
		}

		[Test]
		public async Task VerifyHasChangedEntitiesSetAndMapAsync()
		{
			(await (QueryForPropertyHasChangedAsync(typeof(PartialModifiedFlagsEntity), entityId, "EntitiesSet", "EntitiesMap")).ConfigureAwait(false))
					.ExtractRevisionNumbersFromRevision()
					.Should().Have.SameSequenceAs(1, 11);
		}
	}
}