//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NHibernate.Mapping;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.Integration.Naming.Ids
{
	using System.Threading.Tasks;
	public partial class JoinEmbIdNamingTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(JoinEmbIdNamingRefEdEntity), ed_id1)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(JoinEmbIdNamingRefEdEntity), ed_id2)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(JoinEmbIdNamingRefIngEntity), ing_id1)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfEd1Async()
		{
			var ver1 = new JoinEmbIdNamingRefEdEntity { Id = ed_id1, Data = "data1" };

			var rev1 = await (AuditReader().FindAsync<JoinEmbIdNamingRefEdEntity>(ed_id1, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<JoinEmbIdNamingRefEdEntity>(ed_id1, 2)).ConfigureAwait(false);

			Assert.AreEqual(ver1, rev1);
			Assert.AreEqual(ver1, rev2);
		}

		[Test]
		public async Task VerifyHistoryOfEd2Async()
		{
			var ver1 = new JoinEmbIdNamingRefEdEntity { Id = ed_id2, Data = "data2" };

			var rev1 = await (AuditReader().FindAsync<JoinEmbIdNamingRefEdEntity>(ed_id2, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<JoinEmbIdNamingRefEdEntity>(ed_id2, 2)).ConfigureAwait(false);

			Assert.AreEqual(ver1, rev1);
			Assert.AreEqual(ver1, rev2);
		}

		[Test]
		public async Task VerifyHistoryOfIng1Async()
		{
			var ver1 = new JoinEmbIdNamingRefIngEntity { Id = ing_id1, Data = "x", Reference = null };
			var ver2 = new JoinEmbIdNamingRefIngEntity { Id = ing_id1, Data = "y", Reference = null };

			var rev1 = await (AuditReader().FindAsync<JoinEmbIdNamingRefIngEntity>(ing_id1, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<JoinEmbIdNamingRefIngEntity>(ing_id1, 2)).ConfigureAwait(false);

			Assert.AreEqual(ver1, rev1);
			Assert.AreEqual(ver2, rev2);

			Assert.AreEqual(new JoinEmbIdNamingRefEdEntity { Id = ed_id1, Data = "data1" }, rev1.Reference);
			Assert.AreEqual(new JoinEmbIdNamingRefEdEntity { Id = ed_id2, Data = "data2" }, rev2.Reference);
		}
	}
}