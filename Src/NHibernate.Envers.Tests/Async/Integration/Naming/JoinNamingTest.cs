//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NHibernate.Mapping;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.Integration.Naming
{
	using System.Threading.Tasks;
	public partial class JoinNamingTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(JoinNamingRefEdEntity), ed_id1)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(JoinNamingRefEdEntity), ed_id2)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(JoinNamingRefIngEntity), ing_id1)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfEdId1Async()
		{
			var ver1 = new JoinNamingRefEdEntity {Id = ed_id1, Data = "data1"};

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<JoinNamingRefEdEntity>(ed_id1, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<JoinNamingRefEdEntity>(ed_id1, 2)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfEdId2Async()
		{
			var ver1 = new JoinNamingRefEdEntity { Id = ed_id2, Data = "data2" };

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<JoinNamingRefEdEntity>(ed_id2, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver1, await (AuditReader().FindAsync<JoinNamingRefEdEntity>(ed_id2, 2)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfIngId1Async()
		{
			var ver1 = new JoinNamingRefIngEntity {Id = ing_id1, Data = "x", Reference = null};
			var ver2 = new JoinNamingRefIngEntity {Id = ing_id1, Data = "y", Reference = null};

			Assert.AreEqual(ver1, await (AuditReader().FindAsync<JoinNamingRefIngEntity>(ing_id1, 1)).ConfigureAwait(false));
			Assert.AreEqual(ver2, await (AuditReader().FindAsync<JoinNamingRefIngEntity>(ing_id1, 2)).ConfigureAwait(false));

			Assert.AreEqual(new JoinNamingRefEdEntity { Id = ed_id1, Data = "data1" },
							(await (AuditReader().FindAsync<JoinNamingRefIngEntity>(ing_id1, 1)).ConfigureAwait(false)).Reference);
			Assert.AreEqual(new JoinNamingRefEdEntity { Id = ed_id2, Data = "data2" },
										(await (AuditReader().FindAsync<JoinNamingRefIngEntity>(ing_id1, 2)).ConfigureAwait(false)).Reference);
		}
	}
}