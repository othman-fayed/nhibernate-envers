//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.MultiLevelInheritance
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class InheritanceWithoutInverseTest : TestBase
	{

		[Test]
		public void ShouldNotThrowExceptionOnCreatingAuditAsync()
		{
			Assert.DoesNotThrowAsync(() => saveParentAsync());
		}

		[Test]
		public async Task ShouldAuditParentAndChildProperlyAsync()
		{
			await (saveParentAsync()).ConfigureAwait(false);
			var auditedInheritedParent = await (AuditReader().CreateQuery().ForRevisionsOf<InheritedParent>().SingleAsync()).ConfigureAwait(false);
			var auditedParent = await (AuditReader().CreateQuery().ForRevisionsOf<Parent>().SingleAsync()).ConfigureAwait(false);
			var auditedChild = await (AuditReader().CreateQuery().ForRevisionsOf<Child>().SingleAsync()).ConfigureAwait(false);

			Assert.AreEqual(parent.Id, auditedInheritedParent.Id);
			Assert.AreEqual(parent.Id, auditedParent.Id);
			Assert.AreEqual(parent.Childs.Single().Id, auditedChild.Id);
		}

		private async Task saveParentAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (var tx = Session.BeginTransaction())
			{
				await (Session.SaveAsync(parent, cancellationToken)).ConfigureAwait(false);
				await (tx.CommitAsync(cancellationToken)).ConfigureAwait(false);
			}
		}
	}
}
