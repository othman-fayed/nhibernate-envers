//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Component
{
	using System.Threading.Tasks;
	public partial class DerivedComponentTest : TestBase
	{

		[Test]
		public async Task VerifyActualBaseClassOwnerAsync()
		{
			var owner = await (Session.GetAsync<BaseClassOwner>(id)).ConfigureAwait(false);
			Assert.That(owner.Component, Is.Not.Null);
			Assert.That(owner.Component.Data1, Is.EqualTo("2"));
		}

		[Test]
		public async Task VerifyHistoryOfBaseClassOwnerAsync()
		{
			var owner = await (AuditReader().FindAsync<BaseClassOwner>(id, 1)).ConfigureAwait(false);
			Assert.That(owner.Component, Is.Null);
			owner = await (AuditReader().FindAsync<BaseClassOwner>(id, 2)).ConfigureAwait(false);
			Assert.That(owner.Component, Is.Not.Null);
			Assert.That(owner.Component.Data1, Is.EqualTo("1"));
			owner = await (AuditReader().FindAsync<BaseClassOwner>(id, 3)).ConfigureAwait(false);
			Assert.That(owner.Component, Is.Not.Null);
			Assert.That(owner.Component.Data1, Is.EqualTo("2"));
		}

		[Test]
		public async Task VerifyActualDerivedClassOwnerAsync()
		{
			var owner = await (Session.GetAsync<DerivedClassOwner>(id)).ConfigureAwait(false);
			Assert.That(owner.Component, Is.Not.Null);
			Assert.That(owner.Component.Data1, Is.EqualTo("2"));
		}

		[Test]
		public async Task VerifyHistoryOfDerivedClassOwnerAsync()
		{
			var owner = await (AuditReader().FindAsync<DerivedClassOwner>(id, 4)).ConfigureAwait(false);
			Assert.That(owner.Component, Is.Null);
			owner = await (AuditReader().FindAsync<DerivedClassOwner>(id, 5)).ConfigureAwait(false);
			Assert.That(owner.Component, Is.Not.Null);
			Assert.That(owner.Component.Data1, Is.EqualTo("1"));
			owner = await (AuditReader().FindAsync<DerivedClassOwner>(id, 6)).ConfigureAwait(false);
			Assert.That(owner.Component, Is.Not.Null);
			Assert.That(owner.Component.Data1, Is.EqualTo("2"));
		}
	}
}