//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.SortedSetAndMap
{
	using System.Threading.Tasks;
	public partial class SortedSetAndMapTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1, 2, 3 }, await (AuditReader().GetRevisionsAsync(typeof(SortedSetEntity), id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistory1Async()
		{
			var rev = await (AuditReader().FindAsync<SortedSetEntity>(id, 1)).ConfigureAwait(false);

			CollectionAssert.IsEmpty(rev.SortedSet);
			CollectionAssert.IsEmpty(rev.SortedMap);
		}

		[Test]
		public async Task VerifyHistory2Async()
		{
			var rev = await (AuditReader().FindAsync<SortedSetEntity>(id, 2)).ConfigureAwait(false);

			rev.SortedSet.Count
				.Should().Be.EqualTo(2);
			rev.SortedSet.First().Str
				.Should().Be.EqualTo("b");
			rev.SortedSet.Last().Str
				.Should().Be.EqualTo("a");

			CollectionAssert.IsEmpty(rev.SortedMap);
		}

		[Test]
		public async Task VerifyHistory3Async()
		{
			var rev = await (AuditReader().FindAsync<SortedSetEntity>(id, 3)).ConfigureAwait(false);

			rev.SortedSet.Count
				.Should().Be.EqualTo(1);
			rev.SortedSet.First().Str
				.Should().Be.EqualTo("a");

			rev.SortedMap.Count
				.Should().Be.EqualTo(2);
			rev.SortedMap.Keys.First().Str
				.Should().Be.EqualTo("b");
			rev.SortedMap.Keys.Last().Str
				.Should().Be.EqualTo("a");
		}

		[Test]
		public async Task SortedSetShouldStillHaveCorrectComparerAsync()
		{
			var newObj = new StrTestEntity {Str = "c"};
			var rev = await (AuditReader().FindAsync<SortedSetEntity>(id, 3)).ConfigureAwait(false);

			rev.SortedSet.Count
				.Should().Be.GreaterThan(0);

			rev.SortedSet.Add(newObj);

			rev.SortedSet.First()
				.Should().Be.SameInstanceAs(newObj);
		}

		[Test]
		public async Task SortedMapShouldStillHaveCorrectComparerAsync()
		{
			var newObj = new StrTestEntity { Str = "c" };
			var rev = await (AuditReader().FindAsync<SortedSetEntity>(id, 3)).ConfigureAwait(false);

			rev.SortedMap.Count
				.Should().Be.GreaterThan(0);


			rev.SortedMap.Add(newObj, "dd");

			rev.SortedMap.Keys.First()
				.Should().Be.SameInstanceAs(newObj);
		}
	}
}