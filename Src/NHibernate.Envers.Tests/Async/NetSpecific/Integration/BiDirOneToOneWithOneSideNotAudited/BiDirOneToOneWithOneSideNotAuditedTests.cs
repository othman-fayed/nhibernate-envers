//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using NHibernate.Envers.Query;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.BiDirOneToOneWithOneSideNotAudited
{
	using System.Threading.Tasks;
	public partial class BiDirOneToOneWithOneSideNotAuditedTests : TestBase
	{

		[Test]
		public void QueryHistoryShouldNotThrowAsync()
		{
			Assert.DoesNotThrowAsync(async () =>
				{
					(await (AuditReader().CreateQuery().ForRevisionsOf<Parent>().ResultsAsync()).ConfigureAwait(false)).ToList();
				});
		}

		[Test]
		public async Task QueryHistoryReturnAllRevisionsAsync()
		{
			var parentRevisions = (await (AuditReader().CreateQuery().ForRevisionsOf<Parent>()
				.Add(AuditEntity.Id().Eq(parentId))
				.ResultsAsync()).ConfigureAwait(false)).ToList();

			Assert.AreEqual(3, parentRevisions.Count);
		}

		[Test]
		public async Task ParentsHistoricalVersionsPointsToCurrentNotAuditedChildAsync()
		{
			var parentRevisions = (await (AuditReader().CreateQuery().ForRevisionsOf<Parent>()
				.Add(AuditEntity.Id().Eq(parentId))
				.ResultsAsync()).ConfigureAwait(false)).ToList();

			foreach (var revision in parentRevisions)
			{
				Assert.AreEqual(childLatestStr, revision.Child.Str);
			}
		}
	}
}