//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NHibernate.Engine;
using NHibernate.Envers.Strategy;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Envers.Tests.Entities.OneToMany;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Performance.EvictAfterTx
{
	using System.Threading.Tasks;
	public partial class EvictAuditDataAfterCommitTest : TestBase
	{

		[Test]
		public async Task VerifySessionCacheClearAsync()
		{
			var auditEntityNames = new[] { "NHibernate.Envers.Tests.Entities.StrTestEntity_AUD" };
			var ste = new StrTestEntity { Str = "data" };
			using (var tx = Session.BeginTransaction())
			{
				await (Session.SaveAsync(ste)).ConfigureAwait(false);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			checkEmptyAuditSessionCache(auditEntityNames);

			using (var tx = Session.BeginTransaction())
			{
				ste.Str = "changed";
				await (tx.CommitAsync()).ConfigureAwait(false);
			}

			checkEmptyAuditSessionCache(auditEntityNames);
		}

		[Test]
		public async Task VerifySessionCacheCollectionClearAsync()
		{
			var auditEntityNames = new[] {"NHibernate.Envers.Tests.Entities.OneToMany.SetRefEdEntity_AUD",
																		  "NHibernate.Envers.Tests.Entities.OneToMany.SetRefIngEntity_AUD"};

			var ed1 = new SetRefEdEntity { Id = 1, Data = "data_ed_1" };
			var ed2 = new SetRefEdEntity { Id = 2, Data = "data_ed_2" };
			var ing1 = new SetRefIngEntity { Id = 3, Data = "data_ing_1" };
			var ing2 = new SetRefIngEntity { Id = 4, Data = "data_ing_2" };

			using (var tx = Session.BeginTransaction())
			{
				await (Session.SaveAsync(ed1)).ConfigureAwait(false);
				await (Session.SaveAsync(ed2)).ConfigureAwait(false);
				await (Session.SaveAsync(ing1)).ConfigureAwait(false);
				await (Session.SaveAsync(ing2)).ConfigureAwait(false);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}

			checkEmptyAuditSessionCache(auditEntityNames);

			using (var tx = Session.BeginTransaction())
			{
				ing1.Reference = ed1;
				ing2.Reference = ed1;
				await (tx.CommitAsync()).ConfigureAwait(false);
			}

			checkEmptyAuditSessionCache(auditEntityNames);

			using (var tx = Session.BeginTransaction())
			{
				var reffering = new HashSet<SetRefIngEntity> { ing1, ing2 };
				ed2.Reffering = reffering;
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			checkEmptyAuditSessionCache(auditEntityNames);

			using (var tx = Session.BeginTransaction())
			{
				ed2.Reffering.Remove(ing1);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			checkEmptyAuditSessionCache(auditEntityNames);

			using (var tx = Session.BeginTransaction())
			{
				ed2.Reffering.First().Data = "mod_data_ing_2";
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			checkEmptyAuditSessionCache(auditEntityNames);
		}
	}
}