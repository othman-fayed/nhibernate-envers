//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.IdBag.ManyToMany.UniDirectional
{
	using System.Threading.Tasks;
	public partial class Fixture : TestBase
	{

		[Test]
		public async Task VerifyRevisionsCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof(UniOwning), owningId1)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2, 3);
			(await (AuditReader().GetRevisionsAsync(typeof(UniOwning), owningId2)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(1, 2);

			(await (AuditReader().GetRevisionsAsync(typeof(UniOwned), ownedId1)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(2);
			(await (AuditReader().GetRevisionsAsync(typeof(UniOwned), ownedId2)).ConfigureAwait(false))
				.Should().Have.SameSequenceAs(2);
		}

		[Test]
		public async Task VerifyHistoryOfOwning1Async()
		{
			var owned1 = new UniOwned { Id = ownedId1, Number = 1 };
			var owned2 = new UniOwned { Id = ownedId2, Number = 2 };

			(await (AuditReader().FindAsync<UniOwning>(owningId1, 1)).ConfigureAwait(false))
				.Referencing.Should().Be.Empty();
			(await (AuditReader().FindAsync<UniOwning>(owningId1, 2)).ConfigureAwait(false))
				.Referencing.Should().Have.SameValuesAs(owned1, owned2);
			(await (AuditReader().FindAsync<UniOwning>(owningId1, 3)).ConfigureAwait(false))
				.Referencing.Should().Have.SameValuesAs(owned2);
		}

		[Test]
		public async Task VerifyHistoryOfOwning2Async()
		{
			var owned1 = new UniOwned { Id = ownedId1, Number = 1 };

			(await (AuditReader().FindAsync<UniOwning>(owningId2, 1)).ConfigureAwait(false))
				.Referencing.Should().Be.Empty();
			(await (AuditReader().FindAsync<UniOwning>(owningId2, 2)).ConfigureAwait(false))
				.Referencing.Should().Have.SameValuesAs(owned1);
		}


		[Test]
		public async Task CanReuseAsNormalEntityAsync()
		{
			using (var tx = Session.BeginTransaction())
			{
				var ver3 = await (AuditReader().FindAsync<UniOwning>(owningId1, 3)).ConfigureAwait(false);
				ver3.Referencing.First().Number = 5;
				await (Session.MergeAsync(ver3)).ConfigureAwait(false);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			using (Session.BeginTransaction())
			{
				(await (Session.GetAsync<UniOwned>(ownedId2)).ConfigureAwait(false)).Number.Should().Be.EqualTo(5);
			}
		}
	}
}