//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NHibernate.Cfg;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.NetSpecific.Integration.OneToOne;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Proxy
{
	using System.Threading.Tasks;
	public partial class OneToOneRemovedObjectQueryTest : TestBase
	{

		[Test]
		public async Task VerifyHistoryOfOwningAsync()
		{
			(await (AuditReader().FindAsync<OneToOneOwningEntity>(id, 1)).ConfigureAwait(false))
									 .Owned.Data.Should().Be.EqualTo("Demo Data 1");
			(await (AuditReader().FindAsync<OneToOneOwningEntity>(id, 2)).ConfigureAwait(false))
									 .Owned.Data.Should().Be.EqualTo("Demo Data 2");
			(await (AuditReader().CreateQuery().ForRevisionsOf<OneToOneOwningEntity>(true)
			             .Add(AuditEntity.Id().Eq(id))
			             .Add(AuditEntity.RevisionNumber().Eq(3))
									 .ResultsAsync()).ConfigureAwait(false)).First()
									 .Owned.Data.Should().Be.EqualTo("Demo Data 2");
		}

		[Test]
		public async Task VerifyHistoryOfOwnedAsync()
		{
			(await (AuditReader().FindAsync<OneToOneOwnedEntity>(id, 1)).ConfigureAwait(false))
									 .Owning.Should().Not.Be.Null();
			(await (AuditReader().FindAsync<OneToOneOwnedEntity>(id, 2)).ConfigureAwait(false))
									 .Owning.Should().Not.Be.Null();
			(await (AuditReader().CreateQuery().ForRevisionsOf<OneToOneOwnedEntity>(true)
									 .Add(AuditEntity.Id().Eq(id))
									 .Add(AuditEntity.RevisionNumber().Eq(3))
									 .ResultsAsync()).ConfigureAwait(false)).First()
									 .Owning.Should().Not.Be.Null();
		}
	}
}