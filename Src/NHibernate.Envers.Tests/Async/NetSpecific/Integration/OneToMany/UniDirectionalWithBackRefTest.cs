//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.OneToMany
{
	using System.Threading.Tasks;
	public partial class UniDirectionalWithBackRefTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			(await (AuditReader().GetRevisionsAsync(typeof (Parent), parentId)).ConfigureAwait(false)).Should().Have.SameSequenceAs(1, 2, 4, 5);
			(await (AuditReader().GetRevisionsAsync(typeof(Child), child1Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(2, 3, 5);
			(await (AuditReader().GetRevisionsAsync(typeof(Child), child2Id)).ConfigureAwait(false)).Should().Have.SameSequenceAs(4, 5);
		}

		[Test]
		public async Task VerifyHistoryOfParentAsync()
		{
			var rev1 = await (AuditReader().FindAsync<Parent>(parentId, 1)).ConfigureAwait(false);
			var rev2 = await (AuditReader().FindAsync<Parent>(parentId, 2)).ConfigureAwait(false);
			var rev4 = await (AuditReader().FindAsync<Parent>(parentId, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Parent>(parentId, 5)).ConfigureAwait(false);

			rev1.Data.Should().Be.EqualTo(1);
			rev1.Children.Should().Be.Empty();
			rev2.Data.Should().Be.EqualTo(1);
			rev2.Children.Should().Have.Count.EqualTo(1);
			rev4.Data.Should().Be.EqualTo(2);
			rev4.Children.Should().Have.Count.EqualTo(2);
			rev5.Data.Should().Be.EqualTo(2);
			rev5.Children.Should().Be.Empty();
		}

		[Test]
		public async Task VerifyHistoryOfChild1Async()
		{
			var rev2 = await (AuditReader().FindAsync<Child>(child1Id, 2)).ConfigureAwait(false);
			var rev3 = await (AuditReader().FindAsync<Child>(child1Id, 3)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child>(child1Id, 5)).ConfigureAwait(false);

			rev2.Str.Should().Be.EqualTo("1_1");
			rev3.Str.Should().Be.EqualTo("1_2");
			rev5.Should().Be.Null();
		}

		[Test]
		public async Task VerifyHistoryOfChild2Async()
		{
			var rev4 = await (AuditReader().FindAsync<Child>(child2Id, 4)).ConfigureAwait(false);
			var rev5 = await (AuditReader().FindAsync<Child>(child2Id, 5)).ConfigureAwait(false);

			rev4.Str.Should().Be.EqualTo("1_2");
			rev5.Should().Be.Null();
		}
	}
}