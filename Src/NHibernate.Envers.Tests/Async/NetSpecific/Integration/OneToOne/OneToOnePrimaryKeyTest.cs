//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.OneToOne
{
	using System.Threading.Tasks;
	public partial class OneToOnePrimaryKeyTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1 }, (await (AuditReader().GetRevisionsAsync(typeof(OneToOneOwningEntity), id)).ConfigureAwait(false)).ToList());
			CollectionAssert.AreEquivalent(new[] { 2, 3, 4 }, (await (AuditReader().GetRevisionsAsync(typeof(OneToOneOwnedEntity), id)).ConfigureAwait(false)).ToList());
		}

		[Test]
		public async Task VerifyHistoryOfOwningAsync()
		{
			var owned1 = new OneToOneOwnedEntity{Id=id, Data="1"};
			var owned2 = new OneToOneOwnedEntity{Id=id, Data="2"};

			(await (AuditReader().FindAsync<OneToOneOwningEntity>(id, 1)).ConfigureAwait(false)).Owned
				.Should().Be.Null();
			(await (AuditReader().FindAsync<OneToOneOwningEntity>(id, 2)).ConfigureAwait(false)).Owned
				.Should().Be.EqualTo(owned1);
			(await (AuditReader().FindAsync<OneToOneOwningEntity>(id, 3)).ConfigureAwait(false)).Owned
				.Should().Be.EqualTo(owned2);
			(await (AuditReader().FindAsync<OneToOneOwningEntity>(id, 4)).ConfigureAwait(false)).Owned
				.Should().Be.Null();
		}

		[Test]
		public async Task VerifyHistoryOfOwnedAsync()
		{
			var owning = await (Session.GetAsync<OneToOneOwningEntity>(id)).ConfigureAwait(false);

			(await (AuditReader().FindAsync<OneToOneOwnedEntity>(id, 1)).ConfigureAwait(false)).Should().Be.Null();

			var ver2 = await (AuditReader().FindAsync<OneToOneOwnedEntity>(id, 2)).ConfigureAwait(false);
			ver2.Data.Should().Be.EqualTo("1");
			ver2.Owning.Should().Be.EqualTo(owning);
			
			var ver3 = await (AuditReader().FindAsync<OneToOneOwnedEntity>(id, 3)).ConfigureAwait(false);
			ver3.Data.Should().Be.EqualTo("2");
			ver3.Owning.Should().Be.EqualTo(owning);
			
			(await (AuditReader().FindAsync<OneToOneOwnedEntity>(id, 4)).ConfigureAwait(false)).Should().Be.Null();
		}
	}
}