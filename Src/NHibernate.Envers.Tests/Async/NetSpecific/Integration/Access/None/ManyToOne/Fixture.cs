//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NHibernate.Envers.Query;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Access.None.ManyToOne
{
	using System.Threading.Tasks;
	public partial class Fixture : TestBase
	{

		[Test]
		public async Task VerifyHistoryOfComponentAsync()
		{
			var ver1 = await (AuditReader().FindAsync<Parent>(parentId, 1)).ConfigureAwait(false);
			var ver2 = await (AuditReader().FindAsync<Parent>(parentId, 2)).ConfigureAwait(false);

			ver1.Children.Count.Should().Be.EqualTo(1);
			ver2.Children.Count.Should().Be.EqualTo(2);
		}


		[Test]
		public async Task CanQueryOnAccessNonePropertyAsync()
		{
			(await (AuditReader().CreateQuery()
				.ForHistoryOf<Child, DefaultRevisionEntity>()
				.Add(AuditEntity.Property("ParentId").Eq(parentId))
				.ResultsAsync()).ConfigureAwait(false))
				.Count().Should().Be.EqualTo(2);
		}

		[Test]
		public async Task CanQueryOnAccessNoneManyToOneAsync()
		{
			var parent = new Parent {Id = parentId};
			(await (AuditReader().CreateQuery()
				.ForHistoryOf<Child, DefaultRevisionEntity>()
				.Add(AuditEntity.Property("Parent2").Eq(parent))
				.ResultsAsync()).ConfigureAwait(false))
				.Count().Should().Be.EqualTo(2);
		}
	}
}