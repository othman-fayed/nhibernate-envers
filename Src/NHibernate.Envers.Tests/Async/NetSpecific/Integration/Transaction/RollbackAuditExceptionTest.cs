//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Tests.Entities;
using NHibernate.Exceptions;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Transaction
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class RollbackAuditExceptionTest : TestBase
	{

		[Test]
		public async Task WhenAuditPersistExceptionOccursTransactionShouldBeRolledBackAsync()
		{
			int intId;
			var willCrash = new NoSchemaEntity();
			var intEntity = new IntTestEntity();

			using (var tx = Session.BeginTransaction())
			{
				intId = (int)await (Session.SaveAsync(intEntity)).ConfigureAwait(false);
				await (Session.SaveAsync(willCrash)).ConfigureAwait(false);
				Assert.ThrowsAsync<GenericADOException>(() => tx.CommitAsync());
			}
			ForceNewSession();
			await (verifyNoDataGotPeristedAsync(intId)).ConfigureAwait(false);
		}

		[Test]
		public async Task WhenAuditPersistExceptionOccursTransactionShouldBeRolledBack_FlushModeNeverAsync()
		{
			int intId;
			var willCrash = new NoSchemaEntity();
			var intEntity = new IntTestEntity();
			Session.FlushMode = FlushMode.Manual;

			using (Session.BeginTransaction())
			{
				intId = (int)await (Session.SaveAsync(intEntity)).ConfigureAwait(false);
				await (Session.SaveAsync(willCrash)).ConfigureAwait(false);
				Assert.ThrowsAsync<GenericADOException>(() => Session.FlushAsync());
			}
			await (verifyNoDataGotPeristedAsync(intId)).ConfigureAwait(false);
		}

		private async Task verifyNoDataGotPeristedAsync(int id, CancellationToken cancellationToken = default(CancellationToken))
		{
			using(Session.BeginTransaction())
			{
				(await (Session.CreateQuery("select count(s) from StrTestEntity s ").UniqueResultAsync<long>(cancellationToken)).ConfigureAwait(false))
					.Should().Be.EqualTo(0);
				(await (Session.CreateQuery("select count(s) from IntTestEntity s ").UniqueResultAsync<long>(cancellationToken)).ConfigureAwait(false))
					.Should().Be.EqualTo(0);			
				(await (Session.Auditer().GetRevisionsAsync(typeof(IntTestEntity),id, cancellationToken)).ConfigureAwait(false))
					.Should().Be.Empty();
			}
		}
	}
}