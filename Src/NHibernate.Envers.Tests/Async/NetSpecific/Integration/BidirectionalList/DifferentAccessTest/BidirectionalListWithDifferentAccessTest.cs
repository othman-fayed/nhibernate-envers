//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.BidirectionalList.DifferentAccessTest
{
	using System.Threading.Tasks;
	public partial class BidirectionalListWithDifferentAccessTest : TestBase
	{

		[Test]
		public async Task VerifyRevisionCountAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 1 }, await (AuditReader().GetRevisionsAsync(typeof(Parent), parent_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(Child), child1_id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 1, 2 }, await (AuditReader().GetRevisionsAsync(typeof(Child), child2_id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfParent1Async()
		{
			var child1 = new Child {Id = child1_id};
			var child2 = new Child {Id = child2_id};

			var ver1 = await (AuditReader().FindAsync<Parent>(parent_id, 1)).ConfigureAwait(false);
			ver1.Children[0].Should().Be.EqualTo(child1);
			ver1.Children[1].Should().Be.EqualTo(child2);
		}

		[Test]
		public async Task VerifyHistoryOfParent2Async()
		{
			var child1 = new Child { Id = child1_id };
			var child2 = new Child { Id = child2_id };

			var ver1 = await (AuditReader().FindAsync<Parent>(parent_id, 2)).ConfigureAwait(false);
			ver1.Children[1].Should().Be.EqualTo(child1);
			ver1.Children[0].Should().Be.EqualTo(child2);
		}
	}
}