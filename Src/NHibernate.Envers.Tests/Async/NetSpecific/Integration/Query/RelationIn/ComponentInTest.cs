//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Query;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Query.RelationIn
{
	using System.Threading.Tasks;
	public partial class ComponentInTest : TestBase
	{

		[Test]
		public async Task ShouldGiveHitAsync()
		{
			var searchedInts = new []{3, 75, 125};
			(await (Session.Auditer().CreateQuery().ForEntitiesAtRevision<Person>(1)
				.Add(AuditEntity.Property("Weight.Kilo").In(searchedInts))
				.ResultsAsync()).ConfigureAwait(false)).Should().Not.Be.Empty();
		}

		[Test]
		public async Task ShouldNotGiveHitAsync()
		{
			var searchedInts = new[] { 3, 85, 125 };
			(await (Session.Auditer().CreateQuery().ForEntitiesAtRevision<Person>(1)
				.Add(AuditEntity.Property("Weight.Kilo").In(searchedInts))
				.ResultsAsync()).ConfigureAwait(false)).Should().Be.Empty();			
		}

		[Test]
		public async Task ShouldWorkUsingObjectArrayDirectlyAsync()
		{
			var searchedInts = new object[] { 75 };
			(await (Session.Auditer().CreateQuery().ForEntitiesAtRevision<Person>(1)
				.Add(AuditEntity.Property("Weight.Kilo").In(searchedInts))
				.ResultsAsync()).ConfigureAwait(false)).Should().Not.Be.Empty();
		}

		[Test]
		public async Task ShouldAcceptEmptyAsync()
		{
			(await (Session.Auditer().CreateQuery().ForEntitiesAtRevision<Person>(1)
				.Add(AuditEntity.Property("Weight.Kilo").In(new List<int>()))
				.ResultsAsync()).ConfigureAwait(false)).Should().Be.Empty();

			(await (Session.Auditer().CreateQuery().ForEntitiesAtRevision<Person>(1)
				.Add(AuditEntity.Property("Weight.Kilo").In(new object[0]))
				.ResultsAsync()).ConfigureAwait(false)).Should().Be.Empty();
		}
	}
}