//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Envers.Query;
using NHibernate.Envers.Tests.Entities.Ids;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Query.RelationIn
{
	using System.Threading.Tasks;
	public partial class RelationEmbInTest : TestBase
	{

		[Test]
		public async Task ShouldFindAsync()
		{
			(await (AuditReader().CreateQuery().ForRevisionsOf<EntityReferingEmbEntity>()
				.Add(AuditEntity.Property("Data").Eq("data"))
				.Add(AuditEntity.Property("Reference").In(new List<EmbIdTestEntity> { embEntNoRef1, embEnt, embEntNoRef2 }))
				.ResultsAsync()).ConfigureAwait(false)).Should().Have.SameSequenceAs(new[]{ent});
		}

		[Test]
		public async Task ShouldMissAsync()
		{
			(await (AuditReader().CreateQuery().ForRevisionsOf<EntityReferingEmbEntity>()
				.Add(AuditEntity.Property("Data").Eq("data"))
				.Add(AuditEntity.Property("Reference").In(new List<EmbIdTestEntity> { embEntNoRef1, embEntNoRef2 }))
				.ResultsAsync()).ConfigureAwait(false)).Should().Be.Empty();
		}

		[Test]
		public async Task ShouldMissDueToOtherProoertyAsync()
		{
			(await (AuditReader().CreateQuery().ForRevisionsOf<EntityReferingEmbEntity>()
				.Add(AuditEntity.Property("Reference").In(new List<EmbIdTestEntity> { embEnt }))
				.Add(AuditEntity.Property("Data").Eq("not data"))
				.ResultsAsync()).ConfigureAwait(false)).Should().Be.Empty();
		}
	}
}