//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.Inheritance.Discriminator.Discriminate
{
	using System.Threading.Tasks;
	public partial class DiscriminatorTest : TestBase
	{

		/// <summary>
		/// Verify that revisions match for each type 
		/// </summary>
		[Test]
		public async Task VerifyRevisionCountsAsync()
		{
			CollectionAssert.AreEquivalent(new[] { 2, 3 },
										   await (AuditReader().GetRevisionsAsync(typeof(BaseEntity), baseEntityVer1.Id)).ConfigureAwait(false));
			CollectionAssert.AreEquivalent(new[] { 2, 3 },
										   await (AuditReader().GetRevisionsAsync(typeof(SubtypeEntity), subtypeEntityVer1.Id)).ConfigureAwait(false));
		}

		[Test]
		public async Task VerifyHistoryOfParentAsync()
		{
			(await (AuditReader().FindAsync<BaseEntity>(baseEntityVer1.Id, 2)).ConfigureAwait(false))
				.Should().Be.EqualTo(baseEntityVer1);

			(await (AuditReader().FindAsync<BaseEntity>(baseEntityVer2.Id, 3)).ConfigureAwait(false))
				.Should().Be.EqualTo(baseEntityVer2);
		}

		[Test]
		public async Task VerifyHistoryOfChildAsync()
		{
			(await (AuditReader().FindAsync<SubtypeEntity>(subtypeEntityVer1.Id, 2)).ConfigureAwait(false))
				.Should().Be.EqualTo(subtypeEntityVer1);

			(await (AuditReader().FindAsync<SubtypeEntity>(subtypeEntityVer2.Id, 3)).ConfigureAwait(false))
				.Should().Be.EqualTo(subtypeEntityVer2);
		}
	}
}