//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using SharpTestsEx;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.ForceInitialize
{
	using System.Threading.Tasks;
	public partial class ForceInitializeTest : TestBase
	{

		[Test]
		public async Task InitializeManyToOneNullAsync()
		{
			var parent = await (AuditReader().FindAsync<Parent>(parentId, 1)).ConfigureAwait(false);
			NHibernateUtil.IsInitialized(parent.RelatedEntity).Should().Be.True();
			parent.RelatedEntity.Should().Be.Null();
		}

		[Test]
		public async Task InitializeOneToManyEmptyAsync()
		{
			var parent = await (AuditReader().FindAsync<Parent>(parentId, 1)).ConfigureAwait(false);

			NHibernateUtil.IsInitialized(parent.Children).Should().Be.False();
			await (NHibernateUtil.InitializeAsync(parent.Children)).ConfigureAwait(false);
			NHibernateUtil.IsInitialized(parent.Children).Should().Be.True();

			parent.Children.Should().Be.Empty();
		}

		[Test]
		public async Task InitializeOneToManyNotEmptyAsync()
		{
			var parent = await (AuditReader().FindAsync<Parent>(parentId, 3)).ConfigureAwait(false);

			NHibernateUtil.IsInitialized(parent.Children).Should().Be.False();
			await (NHibernateUtil.InitializeAsync(parent.Children)).ConfigureAwait(false);
			NHibernateUtil.IsInitialized(parent.Children).Should().Be.True();

			var children = parent.Children.ToList();
			children.Should().Have.Count.EqualTo(1);
			children[0].Id.Should().Be.EqualTo(child1Id);
			children[0].Str.Should().Be.EqualTo("1_2");
		}

		[Test]
		public async Task CanReuseCollectionProxyAsNormalEntityAsync()
		{			
			using (var tx = Session.BeginTransaction())
			{
				var ver3 = await (AuditReader().FindAsync<Parent>(parentId, 3)).ConfigureAwait(false);
				ver3.Children.First().Str = "1_3";
				var newChild = new Child { Str = "2_1" };
				ver3.Children.Add(newChild);
				await (Session.MergeAsync(ver3)).ConfigureAwait(false);
				await (tx.CommitAsync()).ConfigureAwait(false);
			}
			using (Session.BeginTransaction())
			{
				var afterMerge = await (Session.GetAsync<Parent>(parentId)).ConfigureAwait(false);
				afterMerge.Children.Count.Should().Be.EqualTo(2);
				afterMerge.Children.First().Id.Should().Be.EqualTo(child1Id);
				afterMerge.Children.First().Str.Should().Be.EqualTo("1_3");
				afterMerge.Children.Last().Str.Should().Be.EqualTo("2_1");
			}
		}

		[Test]
		public async Task NoUpdatesIfMergingNonChangingEntityAsync()
		{
			using (var tx = Session.BeginTransaction())
			{
				var ver3 = await (AuditReader().FindAsync<Parent>(parentId, 3)).ConfigureAwait(false);
				await (Session.MergeAsync(ver3)).ConfigureAwait(false);
				Session.SessionFactory.Statistics.Clear();
				await (tx.CommitAsync()).ConfigureAwait(false);

				Session.SessionFactory.Statistics.PrepareStatementCount
					.Should().Be.EqualTo(0);
			}
		}
	}
}
