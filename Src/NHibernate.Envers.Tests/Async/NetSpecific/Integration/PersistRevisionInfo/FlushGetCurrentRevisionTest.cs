//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NHibernate.Envers.Tests.Entities;
using NUnit.Framework;

namespace NHibernate.Envers.Tests.NetSpecific.Integration.PersistRevisionInfo
{
	using System.Threading.Tasks;
	public partial class FlushGetCurrentRevisionTest : TestBase
	{

		/// <summary>
		/// When saving many objects, you should flush and clear a session
		/// (see "13.1. Batch inserts" in NH reference). This test demonstates
		/// an incorrect value of GetCurrentRevision when flushing a session.
		/// </summary>
		/// <param name="flushAndClear"></param>
		[Test]
		[TestCase(false)]
		[TestCase(true)]
		public async Task CompareRevisionIdToAuditedRevisionWithOptionalFlushAsync(bool flushAndClear)
		{
			int id;
			int revisionId;

			var x = new StrTestEntity { Str = "x" };
			using (var tx = Session.BeginTransaction())
			{
				id = (int)await (Session.SaveAsync(x)).ConfigureAwait(false);
				// Get current revision id (this should be equal to the revision of "x")
				revisionId = (await (AuditReader().GetCurrentRevisionAsync<DefaultRevisionEntity>(true)).ConfigureAwait(false)).Id;

				if (flushAndClear)
				{
					// Flush session
					await (Session.FlushAsync()).ConfigureAwait(false);
					// Clear cache (this seems to cause the problem)
					Session.Clear();
				}

				await (tx.CommitAsync()).ConfigureAwait(false);
			}

			var revisions = await (AuditReader().GetRevisionsAsync(typeof(StrTestEntity), id)).ConfigureAwait(false);
			Assert.That(revisions.Count(), Is.EqualTo(1));
			// If the following assertion fails, the "x" has a different revision
			Assert.That(revisions.Last(), Is.EqualTo(revisionId));
		}
	}
}