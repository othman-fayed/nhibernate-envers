//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Entities;
using NHibernate.Envers.Entities.Mapper.Relation.Query;
using NHibernate.Envers.Exceptions;
using NHibernate.Envers.Query.Criteria;
using NHibernate.Envers.Query.Order;
using NHibernate.Envers.Reader;
using NHibernate.Envers.Tools.Query;
using NHibernate.Proxy;
using NHibernate.SqlCommand;

namespace NHibernate.Envers.Query.Impl
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class AbstractRevisionsQuery<TEntity> : IEntityAuditQuery<TEntity> where TEntity : class
	{

		public abstract Task<IEnumerable<TEntity>> ResultsAsync(CancellationToken cancellationToken = default(CancellationToken));

		public async Task<TEntity> SingleAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var results = await (ResultsAsync(cancellationToken)).ConfigureAwait(false);
			using (var enumerator = results.GetEnumerator())
			{
				if (!enumerator.MoveNext())
				{
					return null;
				}
				var current = enumerator.Current;
				if (!enumerator.MoveNext())
				{
					return current;
				}
			}

			throw new NonUniqueResultException(2); // TODO : it need a modification in NH: the exception should work even without the count of results
		}

		protected async Task<IList<TResult>> BuildAndExecuteQueryAsync<TResult>(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var querySb = new StringBuilder();
			var queryParamValues = new Dictionary<string, object>();

			QueryBuilder.Build(querySb, queryParamValues);

			var query = _versionsReader.Session.CreateQuery(querySb.ToString());
			foreach (var paramValue in queryParamValues)
			{
				query.SetParameter(paramValue.Key, paramValue.Value);
			}
			AddExtraParameter(query);
			setQueryProperties(query);


			return await (query.ListAsync<TResult>(cancellationToken)).ConfigureAwait(false);
		}
	}
}