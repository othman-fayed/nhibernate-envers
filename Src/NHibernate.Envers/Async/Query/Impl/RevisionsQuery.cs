//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Reader;

namespace NHibernate.Envers.Query.Impl
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class RevisionsQuery<TEntity> : AbstractRevisionsQuery<TEntity> where TEntity : class
	{

		public override async Task<IEnumerable<TEntity>> ResultsAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			/*
			The query that should be executed in the versions table:
			SELECT e FROM ent_ver e, rev_entity r WHERE
			  e.revision_type != DEL (if includesDeletations == false) AND
			  e.revision = r.revision AND
			  (all specified conditions, transformed, on the "e" entity)
			  ORDER BY e.revision ASC (unless another order is specified)
			 */
			SetIncludeDeletationClause();

			AddCriterions();

			AddOrders();

			// the result of BuildAndExecuteQuery is always the name-value pair of EntityMode.Map
			var result = await (BuildAndExecuteQueryAsync<IDictionary>(cancellationToken)).ConfigureAwait(false);
			return from versionsEntity in result
			       let revision = GetRevisionNumberFromDynamicEntity(versionsEntity)
			       select (TEntity) EntityInstantiator.CreateInstanceFromVersionsEntity(EntityName, versionsEntity, revision);
		}
	}
}