//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Entities.Mapper.Relation.Query;
using NHibernate.Envers.Reader;
using NHibernate.Proxy;
using NHibernate.SqlCommand;

namespace NHibernate.Envers.Query.Impl
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class RevisionsOfEntityQuery : AbstractAuditQuery 
	{

		protected override async Task FillResultAsync(IList result, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var verEntCfg = VerCfg.AuditEntCfg;

			/*
			The query that should be executed in the versions table:
			SELECT e (unless another projection is specified) FROM ent_ver e, rev_entity r WHERE
			  e.revision_type != DEL (if selectDeletedEntities == false) AND
			  e.revision = r.revision AND
			  (all specified conditions, transformed, on the "e" entity)
			  ORDER BY e.revision ASC (unless another order or projection is specified)
			 */
			if (!_selectDeletedEntities)
			{
				// e.revision_type != DEL AND
				QueryBuilder.RootParameters.AddWhereWithParam(verEntCfg.RevisionTypePropName, "<>", RevisionType.Deleted);
			}

			// all specified conditions, transformed
			foreach (var criterion in Criterions)
			{
				criterion.AddToQuery(VerCfg, VersionsReader, EntityName, QueryBuilder, QueryBuilder.RootParameters);
			}

			if (!HasProjection() && !HasOrder)
			{
				var revisionPropertyPath = verEntCfg.RevisionNumberPath;
				QueryBuilder.AddOrder(QueryConstants.ReferencedEntityAlias, revisionPropertyPath, true);
			}

			if (!_selectEntitiesOnly)
			{
				QueryBuilder.AddFrom(VerCfg.AuditEntCfg.RevisionInfoEntityFullClassName(), QueryConstants.RevisionAlias, true);
				QueryBuilder.RootParameters.AddWhere(VerCfg.AuditEntCfg.RevisionNumberPath, true, "=", QueryConstants.RevisionAlias + ".id", false);
			}

			if (HasProjection())
			{
				await (BuildAndExecuteQueryAsync(result, cancellationToken)).ConfigureAwait(false);
				return;
			}
			var internalResult = new ArrayList();
			await (BuildAndExecuteQueryAsync(internalResult, cancellationToken)).ConfigureAwait(false);

			var revisionTypePropertyName = verEntCfg.RevisionTypePropName;

			foreach (var resultRow in internalResult)
			{
				IDictionary versionsEntity;
				object revisionData = null;

				if (_selectEntitiesOnly)
				{
					versionsEntity = (IDictionary) resultRow;
				}
				else
				{
					var arrayResultRow = (Object[]) resultRow;
					versionsEntity = (IDictionary) arrayResultRow[0];
					revisionData = arrayResultRow[1];
				}

				var revision = revisionNumber(versionsEntity);

				var entity = EntityInstantiator.CreateInstanceFromVersionsEntity(EntityName, versionsEntity, revision);

				result.Add(_selectEntitiesOnly
								 ? entity
								 : new[] {entity, revisionData, versionsEntity[revisionTypePropertyName]});
			}
		}
	}
}
