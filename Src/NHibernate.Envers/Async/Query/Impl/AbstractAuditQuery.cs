//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Entities;
using NHibernate.Envers.Entities.Mapper.Relation.Query;
using NHibernate.Envers.Exceptions;
using NHibernate.Envers.Query.Criteria;
using NHibernate.Envers.Query.Order;
using NHibernate.Envers.Query.Projection;
using NHibernate.Envers.Reader;
using NHibernate.Envers.Tools.Query;
using System;
using System.Linq;
using NHibernate.SqlCommand;

namespace NHibernate.Envers.Query.Impl
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class AbstractAuditQuery : IAuditQueryImplementor
	{

		protected async Task BuildAndExecuteQueryAsync(IList result, CancellationToken cancellationToken = default(CancellationToken)) 
		{
			cancellationToken.ThrowIfCancellationRequested();
			var query = BuildQuery();
			await (query.ListAsync(result, cancellationToken)).ConfigureAwait(false);
		}

		protected abstract Task FillResultAsync(IList result, CancellationToken cancellationToken = default(CancellationToken));

		public async Task<IList> GetResultListAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var ret = new ArrayList();
			await (FillResultAsync(ret, cancellationToken)).ConfigureAwait(false);
			return ret;
		}

		public async Task<IList<T>> GetResultListAsync<T>(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var ret = new List<T>();
			await (FillResultAsync(ret, cancellationToken)).ConfigureAwait(false);
			return ret;
		}

		public async Task<T> GetSingleResultAsync<T>(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			return (T) await (GetSingleResultAsync(cancellationToken)).ConfigureAwait(false);
		}

		public async Task<object> GetSingleResultAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var result = new ArrayList();
			await (FillResultAsync(result, cancellationToken)).ConfigureAwait(false);
			switch (result.Count)
			{
				case 0:
					return null;
				case 1:
					return result[0];
				default:
					throw new NonUniqueResultException(result.Count);
			}
		}

		protected async Task ApplyProjectionsAsync(IQuery query, IList resultToFill, long revision, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (HasProjection())
			{
				foreach (var qr in await (query.ListAsync(cancellationToken)).ConfigureAwait(false))
				{
					if (projections.Count == 1)
					{
						// qr is the value of the projection itself
						var projection = projections[0];
						resultToFill.Add(projection.Item2.ConvertQueryResult(VerCfg, EntityInstantiator, projection.Item1, revision, qr));
					}
					else
					{
						// qr is an array where each of its components holds the value of corresponding projection
						var qresults = (object[]) qr;
						var tresults = new object[qresults.Length];
						for (var i = 0; i < qresults.Length; i++)
						{
							var projection = projections[i];
							tresults[i] = projection.Item2.ConvertQueryResult(VerCfg, EntityInstantiator, projection.Item1, revision, qresults[i]);
						}
						resultToFill.Add(tresults);
					}
				}
			}
			else
			{
				var queryResult = new List<IDictionary>();
				await (query.ListAsync(queryResult, cancellationToken)).ConfigureAwait(false);
				EntityInstantiator.AddInstancesFromVersionsEntities(EntityName, resultToFill, queryResult, revision);
			}
		}
	}
}
