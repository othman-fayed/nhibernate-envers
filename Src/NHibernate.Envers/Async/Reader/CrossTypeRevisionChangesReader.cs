//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Exceptions;
using NHibernate.Envers.Query.Criteria;
using NHibernate.Envers.Tools;

namespace NHibernate.Envers.Reader
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class CrossTypeRevisionChangesReader : ICrossTypeRevisionChangesReader
	{

		public async Task<IEnumerable<object>> FindEntitiesAsync(long revision, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var entityTypes = FindEntityTypes(revision);
			var result = new List<object>();
			foreach (var type in entityTypes)
			{
				result.AddRange(await (_auditReaderImplementor.CreateQuery().ForEntitiesModifiedAtRevision(type.Item1, revision).GetResultListAsync<object>(cancellationToken)).ConfigureAwait(false));
			}
			return result;
		}

		public async Task<IEnumerable<object>> FindEntitiesAsync(long revision, RevisionType revisionType, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var entityTypes = FindEntityTypes(revision);
			var result = new List<object>();
			foreach (var type in entityTypes)
			{
				result.AddRange(await (_auditReaderImplementor.CreateQuery().ForEntitiesModifiedAtRevision(type.Item1, revision)
												.Add(new RevisionTypeAuditExpression(revisionType, "=")).GetResultListAsync<object>(cancellationToken)).ConfigureAwait(false));
			}
			return result;
		}

		public async Task<IDictionary<RevisionType, IEnumerable<object>>> FindEntitiesGroupByRevisionTypeAsync(long revision, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var entityTypes = FindEntityTypes(revision);
			var result = new Dictionary<RevisionType, IEnumerable<object>>();
			foreach (var revType in Enum.GetValues(typeof(RevisionType)))
			{
				var revisionType = (RevisionType)revType;
				var tempList = new List<object>();
				foreach (var type in entityTypes)
				{
					var list = await (_auditReaderImplementor.CreateQuery().ForEntitiesModifiedAtRevision(type.Item1, revision)
										.Add(new RevisionTypeAuditExpression(revisionType, "=")).GetResultListAsync<object>(cancellationToken)).ConfigureAwait(false);
					tempList.AddRange(list);
				}
				result[revisionType] = tempList;
			}
			return result;
		}
	}
}