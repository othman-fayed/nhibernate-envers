//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Engine;
using NHibernate.Envers.Configuration;

namespace NHibernate.Envers.Synchronization.Work
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class AbstractAuditWorkUnit : IAuditWorkUnit 
	{

		public virtual async Task PerformAsync(ISession session, object revisionData, CancellationToken cancellationToken = default(CancellationToken)) 
		{
			cancellationToken.ThrowIfCancellationRequested();
			var data = GenerateData(revisionData);
			await (VerCfg.GlobalCfg.AuditStrategy.PerformAsync(session, EntityName, EntityId, data, revisionData, cancellationToken)).ConfigureAwait(false);
			_performedData = data;
		}

		public async Task UndoAsync(ISession session, CancellationToken cancellationToken = default(CancellationToken)) 
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (IsPerformed()) 
			{
				await (session.DeleteAsync(VerCfg.AuditEntCfg.GetAuditEntityName(EntityName), _performedData, cancellationToken)).ConfigureAwait(false);
				await (session.FlushAsync(cancellationToken)).ConfigureAwait(false);
			}
		}
	}
}
