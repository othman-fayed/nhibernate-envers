//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Collection;
using NHibernate.Engine;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Entities.Mapper;
using NHibernate.Envers.Tools;

namespace NHibernate.Envers.Synchronization.Work
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class PersistentCollectionChangeWorkUnit : AbstractAuditWorkUnit 
	{

		public override async Task PerformAsync(ISession session, object revisionData, CancellationToken cancellationToken = default(CancellationToken)) 
		{
			cancellationToken.ThrowIfCancellationRequested();
			var entitiesCfg = VerCfg.AuditEntCfg;

			foreach (var persistentCollectionChangeData in collectionChanges) 
			{
				// Setting the revision number
				((IDictionary<string, object>) persistentCollectionChangeData.Data[entitiesCfg.OriginalIdPropName])
						.Add(entitiesCfg.RevisionFieldName, revisionData);
				await (VerCfg.GlobalCfg.AuditStrategy.PerformCollectionChangeAsync(session, EntityName, referencingPropertyName, VerCfg, persistentCollectionChangeData, revisionData, cancellationToken)).ConfigureAwait(false);
			}
		}
	}
}
