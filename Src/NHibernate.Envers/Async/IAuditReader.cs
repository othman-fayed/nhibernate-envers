//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using NHibernate.Envers.Configuration.Attributes;
using NHibernate.Envers.Exceptions;
using NHibernate.Envers.Query;

namespace NHibernate.Envers
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface IAuditReader
	{
		/// <summary>
		/// Find an entity by primary key at the given revision.
		/// </summary>
		/// <typeparam name="T">Type of entity</typeparam>
		/// <param name="primaryKey">Primary key of the entity.</param>
		/// <param name="revision">Revision in which to get the entity</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>
		/// The found entity instance at the given revision (its properties may be partially filled
		/// if not all properties are audited) or null, if an entity with that id didn't exist at that
		/// revision.
		/// </returns>
		Task<T> FindAsync<T>(object primaryKey, long revision, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Find an entity by primary key at the given revision.
		/// </summary>
		/// <param name="cls">Type of entity</param>
		/// <param name="primaryKey">Primary key of the entity.</param>
		/// <param name="revision">Revision in which to get the entity</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>
		/// The found entity instance at the given revision (its properties may be partially filled
		/// if not all properties are audited) or null, if an entity with that id didn't exist at that
		/// revision.
		/// </returns>
		Task<object> FindAsync(System.Type cls, object primaryKey, long revision, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Find an entity by primary key at the given revision with the specified entityName.
		/// </summary>
		/// <param name="entityName">Name of the entity (if can't be guessed basing on the {@code cls}).</param>
		/// <param name="primaryKey">Primary key of the entity.</param>
		/// <param name="revision">Revision in which to get the entity</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>
		/// The found entity instance at the given revision (its properties may be partially filled
		/// if not all properties are audited) or null, if an entity with that id didn't exist at that
		/// revision.
		/// </returns>
		Task<object> FindAsync(string entityName, object primaryKey, long revision, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Find an entity by primary key at the given revision with the specified entityName,
		/// possibly including deleted entities in the search.
		/// </summary>
		/// <param name="entityName">Name of the entity (if can't be guessed basing on the {@code cls}).</param>
		/// <param name="primaryKey">Primary key of the entity.</param>
		/// <param name="revision">Revision in which to get the entity</param>
		/// <param name="includeDeletions">Whether to include deleted entities in the search.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>
		/// The found entity instance at the given revision (its properties may be partially filled
		/// if not all properties are audited) or null, if an entity with that id didn't exist at that
		/// revision.
		/// </returns>
		Task<object> FindAsync(string entityName, object primaryKey, long revision, bool includeDeletions, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Get a list of revision numbers, at which an entity was modified.
		/// </summary>
		/// <param name="cls">Type of entity</param>
		/// <param name="primaryKey">Primary key of the entity.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>
		/// A list of revision numbers, at which the entity was modified, sorted in ascending order (so older
		/// revisions come first).
		/// </returns>
		Task<IEnumerable<long>> GetRevisionsAsync(System.Type cls, object primaryKey, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Get a list of revision numbers, at which an entity was modified, looking by entityName.
		/// </summary>
		/// <param name="entityName">Name of the entity </param>
		/// <param name="primaryKey">Primary key of the entity.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>
		/// A list of revision numbers, at which the entity was modified, sorted in ascending order (so older
		/// revisions come first).
		/// </returns>
		Task<IEnumerable<long>> GetRevisionsAsync(string entityName, object primaryKey, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Gets an instance of the current revision entity, to which any entries in the audit tables will be bound.
		/// Please note the if {@code persist} is {@code false}, and no audited entities are modified in this session,
		/// then the obtained revision entity instance won't be persisted. If {@code persist} is {@code true}, the revision
		/// entity instance will always be persisted, regardless of whether audited entities are changed or not.
		/// </summary>
		/// <typeparam name="T">Class of the revision entity. Should be annotated with {@link RevisionEntity}.</typeparam>
		/// <param name="persist">
		/// If the revision entity is not yet persisted, should it become persisted. This way, the primary
		/// identifier (id) will be filled (if it's assigned by the DB) and available, but the revision entity will be
		/// persisted even if there are no changes to audited entities. Otherwise, the revision number (id) can be
		/// null.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>The current revision entity, to which any entries in the audit tables will be bound.</returns>
		Task<T> GetCurrentRevisionAsync<T>(bool persist, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Gets an instance of the current revision entity, to which any entries in the audit tables will be bound.
		/// Please note the if {@code persist} is {@code false}, and no audited entities are modified in this session,
		/// then the obtained revision entity instance won't be persisted. If {@code persist} is {@code true}, the revision
		/// entity instance will always be persisted, regardless of whether audited entities are changed or not.
		/// </summary>
		/// <param name="persist">
		/// If the revision entity is not yet persisted, should it become persisted. This way, the primary
		/// identifier (id) will be filled (if it's assigned by the DB) and available, but the revision entity will be
		/// persisted even if there are no changes to audited entities. Otherwise, the revision number (id) can be
		/// null.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>The current revision entity, to which any entries in the audit tables will be bound.</returns>
		Task<object> GetCurrentRevisionAsync(bool persist, CancellationToken cancellationToken = default(CancellationToken));
	}
}