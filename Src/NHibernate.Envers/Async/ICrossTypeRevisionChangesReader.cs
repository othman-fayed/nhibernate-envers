//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;

namespace NHibernate.Envers
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface ICrossTypeRevisionChangesReader
	{

		/// <summary>
		/// Find all entities changed (added, updated and removed) in a given revision. Executes <i>n+1</i> SQL queries,
		/// where <i>n</i> is a number of different entity classes modified within specified revision.
		/// </summary>
		/// <param name="revision">Revision number.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>Snapshots of all audited entities changed in a given revision.</returns>
		Task<IEnumerable<object>> FindEntitiesAsync(long revision, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Find all entities changed (added, updated and removed) in a given revision. Executes <i>n+1</i> SQL queries,
		/// where <i>n</i> is a number of different entity classes modified within specified revision.
		/// </summary>
		/// <param name="revision">Revision number.</param>
		/// <param name="revisionType">Type of modification</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>Snapshots of all audited entities changed in a given revision and filtered by modification type.</returns>
		Task<IEnumerable<object>> FindEntitiesAsync(long revision, RevisionType revisionType, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Find all entities changed (added, updated and removed) in a given revision grouped by modification type.
		/// Executes <i>mn+1</i> SQL queries, where:
		/// <ul>
		/// <li><i>n</i> - number of different entity classes modified within specified revision.</li>
		/// <li><i>m</i> - number of different revision types. See <see cref="RevisionType"/> enum.</li>
		/// </ul>
		/// </summary>
		/// <param name="revision">Revision number.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>Map containing lists of entity snapshots grouped by modification operation (e.g. addition, update, removal).</returns>
		Task<IDictionary<RevisionType, IEnumerable<object>>> FindEntitiesGroupByRevisionTypeAsync(long revision, CancellationToken cancellationToken = default(CancellationToken));
	}
}