//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Envers.Query;
using NHibernate.Envers.Reader;

namespace NHibernate.Envers.Entities.Mapper.Relation
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class OneToOneNotOwningMapper : AbstractOneToOneMapper
	{

		protected override async Task<object> QueryForReferencedEntityAsync(IAuditReaderImplementor versionsReader, EntityInfo referencedEntity, object primaryKey, long revision, bool removed, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			return await (versionsReader.CreateQuery().ForEntitiesAtRevision(referencedEntity.EntityClass, revision)
				.Add(AuditEntity.RelatedId(_owningReferencePropertyName).Eq(primaryKey))
				.GetSingleResultAsync(cancellationToken)).ConfigureAwait(false);
		}
	}
}
