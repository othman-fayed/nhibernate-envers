//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Exceptions;
using NHibernate.Envers.Reader;

namespace NHibernate.Envers.Entities.Mapper.Relation
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class AbstractOneToOneMapper : AbstractToOneMapper
	{

		protected override async Task NullSafeMapToEntityFromMapAsync(AuditConfiguration verCfg, object obj, IDictionary data, object primaryKey, IAuditReaderImplementor versionsReader, long revision, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var referencedEntity = GetEntityInfo(verCfg, _referencedEntityName);
			var removed = RevisionType.Deleted.Equals(data[verCfg.AuditEntCfg.RevisionTypePropName]);
			object value;
			try
			{
				value = await (QueryForReferencedEntityAsync(versionsReader, referencedEntity, primaryKey, revision, removed, cancellationToken)).ConfigureAwait(false);
			}
			catch (NonUniqueResultException e)
			{
				throw new AuditException("Many versions results for one-to-one relationship " + _entityName + "." + PropertyData.BeanName + ".", e);
			}

			SetPropertyValue(obj, value);
		}

		protected abstract Task<Object> QueryForReferencedEntityAsync(IAuditReaderImplementor versionsReader, EntityInfo referencedEntity, object primaryKey, long revision, bool removed, CancellationToken cancellationToken = default(CancellationToken));
	}
}