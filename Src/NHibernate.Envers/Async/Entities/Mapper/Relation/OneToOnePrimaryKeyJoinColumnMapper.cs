//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Envers.Reader;

namespace NHibernate.Envers.Entities.Mapper.Relation
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class OneToOnePrimaryKeyJoinColumnMapper : AbstractOneToOneMapper
	{

		protected override async Task<object> QueryForReferencedEntityAsync(IAuditReaderImplementor versionsReader, EntityInfo referencedEntity, object primaryKey, long revision, bool removed, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (referencedEntity.IsAudited)
			{
				return await (versionsReader.FindAsync(referencedEntity.EntityName, primaryKey, revision, removed, cancellationToken)).ConfigureAwait(false);
			}
			//Not audited revision
			return createNotAuditedEntityReference(versionsReader, referencedEntity.EntityClass,
			                                       referencedEntity.EntityName, primaryKey);
		}
	}
}