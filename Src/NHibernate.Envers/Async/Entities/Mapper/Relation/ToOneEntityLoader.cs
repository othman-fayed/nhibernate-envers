//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Envers.Configuration;
using NHibernate.Envers.Entities.Mapper.Relation.Lazy;
using NHibernate.Envers.Reader;

namespace NHibernate.Envers.Entities.Mapper.Relation
{
	using System.Threading.Tasks;
	using System.Threading;
	public static partial class ToOneEntityLoader
	{
		public static async Task<object> LoadImmediateAsync(IAuditReaderImplementor versionsReader, string entityName,
			object entityId, long revision, bool removed, AuditConfiguration verCfg, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (verCfg.EntCfg.GetNotVersionEntityConfiguration(entityName) == null)
			{
				// Audited relation, look up entity with Envers.
				// When user traverses removed entities graph, do not restrict revision type of referencing objects
				// to ADD or MOD (DEL possible). See HHH-5845.
				return await (versionsReader.FindAsync(entityName, entityId, revision, removed, cancellationToken)).ConfigureAwait(false);
			}
			// Not audited relation, look up entity with Hibernate.
			return await (versionsReader.SessionImplementor.ImmediateLoadAsync(entityName, entityId, cancellationToken)).ConfigureAwait(false);
		}

		public static async Task<object> CreateProxyOrLoadImmediateAsync(IAuditReaderImplementor versionsReader, string entityName,
			object entityId, long revision, bool removed, AuditConfiguration verCfg, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var persister = versionsReader.SessionImplementor.Factory.GetEntityPersister(entityName);
			if (persister.HasProxy)
			{
				return persister.CreateProxy(entityId,
					new ToOneDelegateSessionImplementor(versionsReader, entityName, entityId, revision, removed, verCfg));
			}

			return await (LoadImmediateAsync(versionsReader, entityName, entityId, revision, removed, verCfg, cancellationToken)).ConfigureAwait(false);
		}
	}
}