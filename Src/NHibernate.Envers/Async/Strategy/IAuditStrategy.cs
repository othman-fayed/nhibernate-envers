//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Xml.Linq;
using NHibernate.Collection;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Entities.Mapper;
using NHibernate.Envers.Entities.Mapper.Relation;
using NHibernate.Envers.Tools.Query;

namespace NHibernate.Envers.Strategy
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface IAuditStrategy
	{

		/// <summary>
		/// Perform the persistence of audited data for regular entities.
		/// </summary>
		/// <param name="session">Session, which can be used to persist the data.</param>
		/// <param name="entityName">Name of the entity, in which the audited change happens</param>
		/// <param name="id">Id of the entity.</param>
		/// <param name="data">Audit data to persist</param>
		/// <param name="revision">Current revision data</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task PerformAsync(ISession session, string entityName, object id, object data, object revision, CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Perform the persistence of audited data for collection ("middle") entities.
		/// </summary>
		/// <param name="session">Session, which can be used to persist the data.</param>
		/// <param name="auditCfg">Audit configuration</param>
		/// <param name="persistentCollectionChangeData">Collection change data to be persisted.</param>
		/// <param name="revision">Current revision data</param>
		/// <param name="entityName">Name of the entity, in which the audited change happens.</param>
		/// <param name="propertyName">The name of the property holding the <see cref="IPersistentCollection"/></param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task PerformCollectionChangeAsync(ISession session, string entityName, string propertyName, AuditConfiguration auditCfg, PersistentCollectionChangeData persistentCollectionChangeData, object revision, CancellationToken cancellationToken = default(CancellationToken));
	}
}