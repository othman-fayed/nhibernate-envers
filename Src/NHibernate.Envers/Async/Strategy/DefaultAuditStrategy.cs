//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml.Linq;
using NHibernate.Envers.Configuration;
using NHibernate.Envers.Entities.Mapper;
using NHibernate.Envers.Entities.Mapper.Relation;
using NHibernate.Envers.Entities.Mapper.Relation.Query;
using NHibernate.Envers.Synchronization;
using NHibernate.Envers.Tools.Query;

namespace NHibernate.Envers.Strategy
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class DefaultAuditStrategy : IAuditStrategy
	{

		public async Task PerformAsync(ISession session, string entityName, object id, object data, object revision, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (session.SaveAsync(_auditConfiguration.AuditEntCfg.GetAuditEntityName(entityName), data, cancellationToken)).ConfigureAwait(false);
			SessionCacheCleaner.ScheduleAuditDataRemoval(session, data);
		}

		public async Task PerformCollectionChangeAsync(ISession session, string entityName, string propertyName, AuditConfiguration auditCfg, PersistentCollectionChangeData persistentCollectionChangeData, object revision, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			var data = persistentCollectionChangeData.Data;
			await (session.SaveAsync(persistentCollectionChangeData.EntityName, data, cancellationToken)).ConfigureAwait(false);
			SessionCacheCleaner.ScheduleAuditDataRemoval(session, data);
		}
	}
}